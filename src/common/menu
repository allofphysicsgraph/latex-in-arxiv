int main() {
  XXH64_hash_t id = XXH64("hello", 5, 0);
  int running = 1;
  struct my_struct *s;
  int temp;

  while (running) {
    printf(" 1. add token\n");
    printf(" 2. add or rename token by id\n");
    printf(" 5. delete all tokens\n");
    printf(" 6. sort items by name\n");
    printf(" 7. sort items by id\n");
    printf(" 8. print tokens\n");
    printf(" 9. count tokens\n");
    printf("10. quit\n");
    switch (atoi(getl("Command"))) {
    case 1:
      static char buf[21];
      memset(buf, '\0', 21);
      strncpy(buf, getl("Name (20 char max"), 21);
      add_token(XXH64(buf, strlen(buf), 0), buf);
      break;
    case 2:
      temp = atoi(getl("ID"));
      add_token(temp, getl("Name (20 char max)"));
      break;
    case 3:
      // s = find_token(atoi(getl("ID to find")));
      // printf("token: %s\n", s ? s->token : "unknown");
      break;
    case 4:
      s = find_token(atoi(getl("ID to delete")));
      if (s) {
        delete_token(s);
      } else {
        printf("id unknown\n");
      }
      break;
    case 5:
      delete_all();
      break;
    case 6:
      HASH_SORT(tokens, by_token);
      break;
    case 7:
      HASH_SORT(tokens, by_id);
      break;
    case 8:
      print_tokens();
      break;
    case 9:
      temp = HASH_COUNT(tokens);
      printf("there are %d tokens\n", temp);
      break;
    case 10:
      running = 0;
      break;
    }
  }

  delete_all(); /* free any structures */
  return 0;
}
