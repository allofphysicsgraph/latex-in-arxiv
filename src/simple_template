    def exposed_get_cite(self, data=False, current_file=False,save=True, print_results=False):
        conn = False
        if self.debug:
            frame = inspect.currentframe()
            print(inspect.getframeinfo(frame).function)
        if not data:
            current_file = self.current_file
            file_data = self.results[current_file][0]
            if len(self.results[f"{current_file}"]) == 1:
                data = self.results[f"{current_file}"][0]
        #get cite_max_len if it exists in config.yaml else default to 1000 chars
        cite_max_len=config.get('cite_max_len',1000)
        q = r'\\cite.{{0,{}}}'.format(cite_max_len)
        for cite_match in re.findall(q, data):
            s = c_char_p(str.encode(cite_match))
            cite = CDLL("./cite.so")
            cite.test.restype = c_char_p
            if self.postgres:
                conn, cursor = self.db_cursor()
            if save or print_results:
                cite.init()
                for match in cite.test(s).decode().splitlines():
                    #print(match)
                    if not save:
                        self.results[f"{current_file}_cite"].append(match)
                    if print_results:
                        print(match)
                    if self.postgres:
                        if not current_file:
                            current_file = self.current_file
                        length = len(match)
                        match = match.replace("'", "''")
                        cursor.execute(
                            f"insert into cite (filename,cite,len) values ('{current_file}','{match}',{length});"
                        )
                        conn.commit()
        if conn:
                conn.close()
