/*
 * @LANG: c
 */
#include <string.h>
#include <ctype.h>
#include <err.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <unistd.h>

int scan(const char *in);
%%{
	machine part_token;
	main := |*


'\\begin{abstract}' => { printf("%s:%zd:%zd\n", "\\begin{abstract}",ts-in,te-in);};
'\\begin{Abstract}' => { printf("%s:%zd:%zd\n", "\\begin{Abstract}",ts-in,te-in);};
'\\begin{acknowledgement}' => { printf("%s:%zd:%zd\n", "\\begin{acknowledgement}",ts-in,te-in);};
'\\begin{acknowledgements}' => { printf("%s:%zd:%zd\n", "\\begin{acknowledgements}",ts-in,te-in);};
'\\begin{acknowledgments}' => { printf("%s:%zd:%zd\n", "\\begin{acknowledgments}",ts-in,te-in);};
'\\begin{ack}' => { printf("%s:%zd:%zd\n", "\\begin{ack}",ts-in,te-in);};
'\\begin{adjustwidth}' => { printf("%s:%zd:%zd\n", "\\begin{adjustwidth}",ts-in,te-in);};
'\\begin{aeqns}' => { printf("%s:%zd:%zd\n", "\\begin{aeqns}",ts-in,te-in);};
'\\begin{alert}' => { printf("%s:%zd:%zd\n", "\\begin{alert}",ts-in,te-in);};
'\\begin{algorithm2e}' => { printf("%s:%zd:%zd\n", "\\begin{algorithm2e}",ts-in,te-in);};
'\\begin{algorithmic}' => { printf("%s:%zd:%zd\n", "\\begin{algorithmic}",ts-in,te-in);};
'\\begin{algorithm}' => { printf("%s:%zd:%zd\n", "\\begin{algorithm}",ts-in,te-in);};
'\\begin{alg}' => { printf("%s:%zd:%zd\n", "\\begin{alg}",ts-in,te-in);};
'\\begin{alignat}' => { printf("%s:%zd:%zd\n", "\\begin{alignat}",ts-in,te-in);};
'\\begin{alignedat}' => { printf("%s:%zd:%zd\n", "\\begin{alignedat}",ts-in,te-in);};
'\\begin{aligned}' => { printf("%s:%zd:%zd\n", "\\begin{aligned}",ts-in,te-in);};
'\\begin{align}' => { printf("%s:%zd:%zd\n", "\\begin{align}",ts-in,te-in);};
'\\begin{alltt}' => { printf("%s:%zd:%zd\n", "\\begin{alltt}",ts-in,te-in);};
'\\begin{alterqcm}' => { printf("%s:%zd:%zd\n", "\\begin{alterqcm}",ts-in,te-in);};
'\\begin{AMS}' => { printf("%s:%zd:%zd\n", "\\begin{AMS}",ts-in,te-in);};
'\\begin{anexample}' => { printf("%s:%zd:%zd\n", "\\begin{anexample}",ts-in,te-in);};
'\\begin{answer}' => { printf("%s:%zd:%zd\n", "\\begin{answer}",ts-in,te-in);};
'\\begin{answers}' => { printf("%s:%zd:%zd\n", "\\begin{answers}",ts-in,te-in);};
'\\begin{appendices}' => { printf("%s:%zd:%zd\n", "\\begin{appendices}",ts-in,te-in);};
'\\begin{appendix}' => { printf("%s:%zd:%zd\n", "\\begin{appendix}",ts-in,te-in);};
'\\begin{array}' => { printf("%s:%zd:%zd\n", "\\begin{array}",ts-in,te-in);};
'\\begin{article}' => { printf("%s:%zd:%zd\n", "\\begin{article}",ts-in,te-in);};
'\\begin{ass}' => { printf("%s:%zd:%zd\n", "\\begin{ass}",ts-in,te-in);};
'\\begin{assum}' => { printf("%s:%zd:%zd\n", "\\begin{assum}",ts-in,te-in);};
'\\begin{assumption}' => { printf("%s:%zd:%zd\n", "\\begin{assumption}",ts-in,te-in);};
'\\begin{asy}' => { printf("%s:%zd:%zd\n", "\\begin{asy}",ts-in,te-in);};
'\\begin{aug}' => { printf("%s:%zd:%zd\n", "\\begin{aug}",ts-in,te-in);};
'\\begin{axiom}' => { printf("%s:%zd:%zd\n", "\\begin{axiom}",ts-in,te-in);};
'\\begin{axis}' => { printf("%s:%zd:%zd\n", "\\begin{axis}",ts-in,te-in);};
'\\begin{barticle}' => { printf("%s:%zd:%zd\n", "\\begin{barticle}",ts-in,te-in);};
'\\begin{baytabular}' => { printf("%s:%zd:%zd\n", "\\begin{baytabular}",ts-in,te-in);};
'\\begin{bbook}' => { printf("%s:%zd:%zd\n", "\\begin{bbook}",ts-in,te-in);};
'\\begin{bem}' => { printf("%s:%zd:%zd\n", "\\begin{bem}",ts-in,te-in);};
'\\begin{beweis}' => { printf("%s:%zd:%zd\n", "\\begin{beweis}",ts-in,te-in);};
'\\begin{bf}' => { printf("%s:%zd:%zd\n", "\\begin{bf}",ts-in,te-in);};
'\\begin{bfseries}' => { printf("%s:%zd:%zd\n", "\\begin{bfseries}",ts-in,te-in);};
'\\begin{bibdiv}' => { printf("%s:%zd:%zd\n", "\\begin{bibdiv}",ts-in,te-in);};
'\\begin{biblist}' => { printf("%s:%zd:%zd\n", "\\begin{biblist}",ts-in,te-in);};
'\\begin{bincollection}' => { printf("%s:%zd:%zd\n", "\\begin{bincollection}",ts-in,te-in);};
'\\begin{binproceedings}' => { printf("%s:%zd:%zd\n", "\\begin{binproceedings}",ts-in,te-in);};
'\\begin{biography}' => { printf("%s:%zd:%zd\n", "\\begin{biography}",ts-in,te-in);};
'\\begin{blanko}' => { printf("%s:%zd:%zd\n", "\\begin{blanko}",ts-in,te-in);};
'\\begin{block}' => { printf("%s:%zd:%zd\n", "\\begin{block}",ts-in,te-in);};
'\\begin{bmatrix}' => { printf("%s:%zd:%zd\n", "\\begin{bmatrix}",ts-in,te-in);};
'\\begin{Bmatrix}' => { printf("%s:%zd:%zd\n", "\\begin{Bmatrix}",ts-in,te-in);};
'\\begin{bmisc}' => { printf("%s:%zd:%zd\n", "\\begin{bmisc}",ts-in,te-in);};
'\\begin{Body}' => { printf("%s:%zd:%zd\n", "\\begin{Body}",ts-in,te-in);};
'\\begin{boxedminipage}' => { printf("%s:%zd:%zd\n", "\\begin{boxedminipage}",ts-in,te-in);};
'\\begin{call}' => { printf("%s:%zd:%zd\n", "\\begin{call}",ts-in,te-in);};
'\\begin{cal}' => { printf("%s:%zd:%zd\n", "\\begin{cal}",ts-in,te-in);};
'\\begin{captionbeside}' => { printf("%s:%zd:%zd\n", "\\begin{captionbeside}",ts-in,te-in);};
'\\begin{caption}' => { printf("%s:%zd:%zd\n", "\\begin{caption}",ts-in,te-in);};
'\\begin{cartonaugh}' => { printf("%s:%zd:%zd\n", "\\begin{cartonaugh}",ts-in,te-in);};
'\\begin{case}' => { printf("%s:%zd:%zd\n", "\\begin{case}",ts-in,te-in);};
'\\begin{cases}' => { printf("%s:%zd:%zd\n", "\\begin{cases}",ts-in,te-in);};
'\\begin{CD}' => { printf("%s:%zd:%zd\n", "\\begin{CD}",ts-in,te-in);};
'\\begin{centering}' => { printf("%s:%zd:%zd\n", "\\begin{centering}",ts-in,te-in);};
'\\begin{centerline}' => { printf("%s:%zd:%zd\n", "\\begin{centerline}",ts-in,te-in);};
'\\begin{center}' => { printf("%s:%zd:%zd\n", "\\begin{center}",ts-in,te-in);};
'\\begin{chair}' => { printf("%s:%zd:%zd\n", "\\begin{chair}",ts-in,te-in);};
'\\begin{changemargin}' => { printf("%s:%zd:%zd\n", "\\begin{changemargin}",ts-in,te-in);};
'\\begin{chapterendexercises}' => { printf("%s:%zd:%zd\n", "\\begin{chapterendexercises}",ts-in,te-in);};
'\\begin{chapthebibliography}' => { printf("%s:%zd:%zd\n", "\\begin{chapthebibliography}",ts-in,te-in);};
'\\begin{choices}' => { printf("%s:%zd:%zd\n", "\\begin{choices}",ts-in,te-in);};
'\\begin{claim}' => { printf("%s:%zd:%zd\n", "\\begin{claim}",ts-in,te-in);};
'\\begin{Claim}' => { printf("%s:%zd:%zd\n", "\\begin{Claim}",ts-in,te-in);};
'\\begin{class}' => { printf("%s:%zd:%zd\n", "\\begin{class}",ts-in,te-in);};
'\\begin{clue}' => { printf("%s:%zd:%zd\n", "\\begin{clue}",ts-in,te-in);};
'\\begin{codeexample}' => { printf("%s:%zd:%zd\n", "\\begin{codeexample}",ts-in,te-in);};
'\\begin{codefile}' => { printf("%s:%zd:%zd\n", "\\begin{codefile}",ts-in,te-in);};
'\\begin{code}' => { printf("%s:%zd:%zd\n", "\\begin{code}",ts-in,te-in);};
'\\begin{colormixin}' => { printf("%s:%zd:%zd\n", "\\begin{colormixin}",ts-in,te-in);};
'\\begin{color}' => { printf("%s:%zd:%zd\n", "\\begin{color}",ts-in,te-in);};
'\\begin{column}' => { printf("%s:%zd:%zd\n", "\\begin{column}",ts-in,te-in);};
'\\begin{columns}' => { printf("%s:%zd:%zd\n", "\\begin{columns}",ts-in,te-in);};
'\\begin{comment}' => { printf("%s:%zd:%zd\n", "\\begin{comment}",ts-in,te-in);};
'\\begin{compactenum}' => { printf("%s:%zd:%zd\n", "\\begin{compactenum}",ts-in,te-in);};
'\\begin{compactitem}' => { printf("%s:%zd:%zd\n", "\\begin{compactitem}",ts-in,te-in);};
'\\begin{com}' => { printf("%s:%zd:%zd\n", "\\begin{com}",ts-in,te-in);};
'\\begin{condition}' => { printf("%s:%zd:%zd\n", "\\begin{condition}",ts-in,te-in);};
'\\begin{cond}' => { printf("%s:%zd:%zd\n", "\\begin{cond}",ts-in,te-in);};
'\\begin{conjecture}' => { printf("%s:%zd:%zd\n", "\\begin{conjecture}",ts-in,te-in);};
'\\begin{conj}' => { printf("%s:%zd:%zd\n", "\\begin{conj}",ts-in,te-in);};
'\\begin{construction}' => { printf("%s:%zd:%zd\n", "\\begin{construction}",ts-in,te-in);};
'\\begin{contract}' => { printf("%s:%zd:%zd\n", "\\begin{contract}",ts-in,te-in);};
'\\begin{corollaire}' => { printf("%s:%zd:%zd\n", "\\begin{corollaire}",ts-in,te-in);};
'\\begin{corollary}' => { printf("%s:%zd:%zd\n", "\\begin{corollary}",ts-in,te-in);};
'\\begin{Corollary}' => { printf("%s:%zd:%zd\n", "\\begin{Corollary}",ts-in,te-in);};
'\\begin{corol}' => { printf("%s:%zd:%zd\n", "\\begin{corol}",ts-in,te-in);};
'\\begin{coro}' => { printf("%s:%zd:%zd\n", "\\begin{coro}",ts-in,te-in);};
'\\begin{cor}' => { printf("%s:%zd:%zd\n", "\\begin{cor}",ts-in,te-in);};
'\\begin{Cor}' => { printf("%s:%zd:%zd\n", "\\begin{Cor}",ts-in,te-in);};
'\\begin{corr}' => { printf("%s:%zd:%zd\n", "\\begin{corr}",ts-in,te-in);};
'\\begin{cproof}' => { printf("%s:%zd:%zd\n", "\\begin{cproof}",ts-in,te-in);};
'\\begin{dcases}' => { printf("%s:%zd:%zd\n", "\\begin{dcases}",ts-in,te-in);};
'\\begin{ddd}' => { printf("%s:%zd:%zd\n", "\\begin{ddd}",ts-in,te-in);};
'\\begin{Declaration}' => { printf("%s:%zd:%zd\n", "\\begin{Declaration}",ts-in,te-in);};
'\\begin{define}' => { printf("%s:%zd:%zd\n", "\\begin{define}",ts-in,te-in);};
'\\begin{definicion}' => { printf("%s:%zd:%zd\n", "\\begin{definicion}",ts-in,te-in);};
'\\begin{definition}' => { printf("%s:%zd:%zd\n", "\\begin{definition}",ts-in,te-in);};
'\\begin{Definition}' => { printf("%s:%zd:%zd\n", "\\begin{Definition}",ts-in,te-in);};
'\\begin{definizione}' => { printf("%s:%zd:%zd\n", "\\begin{definizione}",ts-in,te-in);};
'\\begin{defin}' => { printf("%s:%zd:%zd\n", "\\begin{defin}",ts-in,te-in);};
'\\begin{defi}' => { printf("%s:%zd:%zd\n", "\\begin{defi}",ts-in,te-in);};
'\\begin{Defi}' => { printf("%s:%zd:%zd\n", "\\begin{Defi}",ts-in,te-in);};
'\\begin{defn}' => { printf("%s:%zd:%zd\n", "\\begin{defn}",ts-in,te-in);};
'\\begin{Defn}' => { printf("%s:%zd:%zd\n", "\\begin{Defn}",ts-in,te-in);};
'\\begin{Def}' => { printf("%s:%zd:%zd\n", "\\begin{Def}",ts-in,te-in);};
'\\begin{deluxetable}' => { printf("%s:%zd:%zd\n", "\\begin{deluxetable}",ts-in,te-in);};
'\\begin{demo}' => { printf("%s:%zd:%zd\n", "\\begin{demo}",ts-in,te-in);};
'\\begin{de}' => { printf("%s:%zd:%zd\n", "\\begin{de}",ts-in,te-in);};
'\\begin{desclist}' => { printf("%s:%zd:%zd\n", "\\begin{desclist}",ts-in,te-in);};
'\\begin{description}' => { printf("%s:%zd:%zd\n", "\\begin{description}",ts-in,te-in);};
'\\begin{Description}' => { printf("%s:%zd:%zd\n", "\\begin{Description}",ts-in,te-in);};
'\\begin{desctabular}' => { printf("%s:%zd:%zd\n", "\\begin{desctabular}",ts-in,te-in);};
'\\begin{detail}' => { printf("%s:%zd:%zd\n", "\\begin{detail}",ts-in,te-in);};
'\\begin{Dfigures}' => { printf("%s:%zd:%zd\n", "\\begin{Dfigures}",ts-in,te-in);};
'\\begin{dfn}' => { printf("%s:%zd:%zd\n", "\\begin{dfn}",ts-in,te-in);};
'\\begin{df}' => { printf("%s:%zd:%zd\n", "\\begin{df}",ts-in,te-in);};
'\\begin{DGCpicture}' => { printf("%s:%zd:%zd\n", "\\begin{DGCpicture}",ts-in,te-in);};
'\\begin{diagram}' => { printf("%s:%zd:%zd\n", "\\begin{diagram}",ts-in,te-in);};
'\\begin{Diagram}' => { printf("%s:%zd:%zd\n", "\\begin{Diagram}",ts-in,te-in);};
'\\begin{displaymath}' => { printf("%s:%zd:%zd\n", "\\begin{displaymath}",ts-in,te-in);};
'\\begin{display}' => { printf("%s:%zd:%zd\n", "\\begin{display}",ts-in,te-in);};
'\\begin{displaystyle}' => { printf("%s:%zd:%zd\n", "\\begin{displaystyle}",ts-in,te-in);};
'\\begin{document}' => { printf("%s:%zd:%zd\n", "\\begin{document}",ts-in,te-in);};
'\\begin{DoxyCompactItemize}' => { printf("%s:%zd:%zd\n", "\\begin{DoxyCompactItemize}",ts-in,te-in);};
'\\begin{DoxyCompactList}' => { printf("%s:%zd:%zd\n", "\\begin{DoxyCompactList}",ts-in,te-in);};
'\\begin{DoxyParamCaption}' => { printf("%s:%zd:%zd\n", "\\begin{DoxyParamCaption}",ts-in,te-in);};
'\\begin{DoxyParams}' => { printf("%s:%zd:%zd\n", "\\begin{DoxyParams}",ts-in,te-in);};
'\\begin{dq}' => { printf("%s:%zd:%zd\n", "\\begin{dq}",ts-in,te-in);};
'\\begin{DSPOpcodeBytefield}' => { printf("%s:%zd:%zd\n", "\\begin{DSPOpcodeBytefield}",ts-in,te-in);};
'\\begin{DSPOpcodeDescription}' => { printf("%s:%zd:%zd\n", "\\begin{DSPOpcodeDescription}",ts-in,te-in);};
'\\begin{DSPOpcodeFormat}' => { printf("%s:%zd:%zd\n", "\\begin{DSPOpcodeFormat}",ts-in,te-in);};
'\\begin{DSPOpcodeOperation}' => { printf("%s:%zd:%zd\n", "\\begin{DSPOpcodeOperation}",ts-in,te-in);};
'\\begin{DSPOpcode}' => { printf("%s:%zd:%zd\n", "\\begin{DSPOpcode}",ts-in,te-in);};
'\\begin{eg}' => { printf("%s:%zd:%zd\n", "\\begin{eg}",ts-in,te-in);};
'\\begin{empheq}' => { printf("%s:%zd:%zd\n", "\\begin{empheq}",ts-in,te-in);};
'\\begin{em}' => { printf("%s:%zd:%zd\n", "\\begin{em}",ts-in,te-in);};
'\\begin{English}' => { printf("%s:%zd:%zd\n", "\\begin{English}",ts-in,te-in);};
'\\begin{entry}' => { printf("%s:%zd:%zd\n", "\\begin{entry}",ts-in,te-in);};
'\\begin{enumerate}' => { printf("%s:%zd:%zd\n", "\\begin{enumerate}",ts-in,te-in);};
'\\begin{enum}' => { printf("%s:%zd:%zd\n", "\\begin{enum}",ts-in,te-in);};
'\\begin{Environment}' => { printf("%s:%zd:%zd\n", "\\begin{Environment}",ts-in,te-in);};
'\\begin{eqalignno}' => { printf("%s:%zd:%zd\n", "\\begin{eqalignno}",ts-in,te-in);};
'\\begin{eqalign}' => { printf("%s:%zd:%zd\n", "\\begin{eqalign}",ts-in,te-in);};
'\\begin{eqnarray}' => { printf("%s:%zd:%zd\n", "\\begin{eqnarray}",ts-in,te-in);};
'\\begin{Eqnarray}' => { printf("%s:%zd:%zd\n", "\\begin{Eqnarray}",ts-in,te-in);};
'\\begin{eqn}' => { printf("%s:%zd:%zd\n", "\\begin{eqn}",ts-in,te-in);};
'\\begin{eqntbl}' => { printf("%s:%zd:%zd\n", "\\begin{eqntbl}",ts-in,te-in);};
'\\begin{eq}' => { printf("%s:%zd:%zd\n", "\\begin{eq}",ts-in,te-in);};
'\\begin{equation}' => { printf("%s:%zd:%zd\n", "\\begin{equation}",ts-in,te-in);};
'\\begin{equ}' => { printf("%s:%zd:%zd\n", "\\begin{equ}",ts-in,te-in);};
'\\begin{equs}' => { printf("%s:%zd:%zd\n", "\\begin{equs}",ts-in,te-in);};
'\\begin{errdesc}' => { printf("%s:%zd:%zd\n", "\\begin{errdesc}",ts-in,te-in);};
'\\begin{example}' => { printf("%s:%zd:%zd\n", "\\begin{example}",ts-in,te-in);};
'\\begin{Example}' => { printf("%s:%zd:%zd\n", "\\begin{Example}",ts-in,te-in);};
'\\begin{examples}' => { printf("%s:%zd:%zd\n", "\\begin{examples}",ts-in,te-in);};
'\\begin{exam}' => { printf("%s:%zd:%zd\n", "\\begin{exam}",ts-in,te-in);};
'\\begin{exa}' => { printf("%s:%zd:%zd\n", "\\begin{exa}",ts-in,te-in);};
'\\begin{exe}' => { printf("%s:%zd:%zd\n", "\\begin{exe}",ts-in,te-in);};
'\\begin{exercice}' => { printf("%s:%zd:%zd\n", "\\begin{exercice}",ts-in,te-in);};
'\\begin{exercise}' => { printf("%s:%zd:%zd\n", "\\begin{exercise}",ts-in,te-in);};
'\\begin{exmp}' => { printf("%s:%zd:%zd\n", "\\begin{exmp}",ts-in,te-in);};
'\\begin{exm}' => { printf("%s:%zd:%zd\n", "\\begin{exm}",ts-in,te-in);};
'\\begin{Explain}' => { printf("%s:%zd:%zd\n", "\\begin{Explain}",ts-in,te-in);};
'\\begin{ex}' => { printf("%s:%zd:%zd\n", "\\begin{ex}",ts-in,te-in);};
'\\begin{Ex}' => { printf("%s:%zd:%zd\n", "\\begin{Ex}",ts-in,te-in);};
'\\begin{exs}' => { printf("%s:%zd:%zd\n", "\\begin{exs}",ts-in,te-in);};
'\\begin{fact}' => { printf("%s:%zd:%zd\n", "\\begin{fact}",ts-in,te-in);};
'\\begin{feynartspicture}' => { printf("%s:%zd:%zd\n", "\\begin{feynartspicture}",ts-in,te-in);};
'\\begin{figcap}' => { printf("%s:%zd:%zd\n", "\\begin{figcap}",ts-in,te-in);};
'\\begin{fig}' => { printf("%s:%zd:%zd\n", "\\begin{fig}",ts-in,te-in);};
'\\begin{figure}' => { printf("%s:%zd:%zd\n", "\\begin{figure}",ts-in,te-in);};
'\\begin{Figure}' => { printf("%s:%zd:%zd\n", "\\begin{Figure}",ts-in,te-in);};
'\\begin{filecontents}' => { printf("%s:%zd:%zd\n", "\\begin{filecontents}",ts-in,te-in);};
'\\begin{fixy}' => { printf("%s:%zd:%zd\n", "\\begin{fixy}",ts-in,te-in);};
'\\begin{flagdescription}' => { printf("%s:%zd:%zd\n", "\\begin{flagdescription}",ts-in,te-in);};
'\\begin{flalign}' => { printf("%s:%zd:%zd\n", "\\begin{flalign}",ts-in,te-in);};
'\\begin{floatingfigure}' => { printf("%s:%zd:%zd\n", "\\begin{floatingfigure}",ts-in,te-in);};
'\\begin{flushleft}' => { printf("%s:%zd:%zd\n", "\\begin{flushleft}",ts-in,te-in);};
'\\begin{flushright}' => { printf("%s:%zd:%zd\n", "\\begin{flushright}",ts-in,te-in);};
'\\begin{fmfchar}' => { printf("%s:%zd:%zd\n", "\\begin{fmfchar}",ts-in,te-in);};
'\\begin{fmffile}' => { printf("%s:%zd:%zd\n", "\\begin{fmffile}",ts-in,te-in);};
'\\begin{fmffor}' => { printf("%s:%zd:%zd\n", "\\begin{fmffor}",ts-in,te-in);};
'\\begin{fmfgraph}' => { printf("%s:%zd:%zd\n", "\\begin{fmfgraph}",ts-in,te-in);};
'\\begin{fminipage}' => { printf("%s:%zd:%zd\n", "\\begin{fminipage}",ts-in,te-in);};
'\\begin{footnote}' => { printf("%s:%zd:%zd\n", "\\begin{footnote}",ts-in,te-in);};
'\\begin{footnotesize}' => { printf("%s:%zd:%zd\n", "\\begin{footnotesize}",ts-in,te-in);};
'\\begin{formula}' => { printf("%s:%zd:%zd\n", "\\begin{formula}",ts-in,te-in);};
'\\begin{framed}' => { printf("%s:%zd:%zd\n", "\\begin{framed}",ts-in,te-in);};
'\\begin{frame}' => { printf("%s:%zd:%zd\n", "\\begin{frame}",ts-in,te-in);};
'\\begin{frontmatter}' => { printf("%s:%zd:%zd\n", "\\begin{frontmatter}",ts-in,te-in);};
'\\begin{fulllineitems}' => { printf("%s:%zd:%zd\n", "\\begin{fulllineitems}",ts-in,te-in);};
'\\begin{fullversion}' => { printf("%s:%zd:%zd\n", "\\begin{fullversion}",ts-in,te-in);};
'\\begin{gathered}' => { printf("%s:%zd:%zd\n", "\\begin{gathered}",ts-in,te-in);};
'\\begin{gather}' => { printf("%s:%zd:%zd\n", "\\begin{gather}",ts-in,te-in);};
'\\begin{HBox}' => { printf("%s:%zd:%zd\n", "\\begin{HBox}",ts-in,te-in);};
'\\begin{history}' => { printf("%s:%zd:%zd\n", "\\begin{history}",ts-in,te-in);};
'\\begin{htmlonly}' => { printf("%s:%zd:%zd\n", "\\begin{htmlonly}",ts-in,te-in);};
'\\begin{hypothesis}' => { printf("%s:%zd:%zd\n", "\\begin{hypothesis}",ts-in,te-in);};
'\\begin{hyp}' => { printf("%s:%zd:%zd\n", "\\begin{hyp}",ts-in,te-in);};
'\\begin{IEEEbiographynophoto}' => { printf("%s:%zd:%zd\n", "\\begin{IEEEbiographynophoto}",ts-in,te-in);};
'\\begin{IEEEbiography}' => { printf("%s:%zd:%zd\n", "\\begin{IEEEbiography}",ts-in,te-in);};
'\\begin{IEEEeqnarraybox}' => { printf("%s:%zd:%zd\n", "\\begin{IEEEeqnarraybox}",ts-in,te-in);};
'\\begin{IEEEeqnarray}' => { printf("%s:%zd:%zd\n", "\\begin{IEEEeqnarray}",ts-in,te-in);};
'\\begin{IEEEkeywords}' => { printf("%s:%zd:%zd\n", "\\begin{IEEEkeywords}",ts-in,te-in);};
'\\begin{IEEEproof}' => { printf("%s:%zd:%zd\n", "\\begin{IEEEproof}",ts-in,te-in);};
'\\begin{ignore}' => { printf("%s:%zd:%zd\n", "\\begin{ignore}",ts-in,te-in);};
'\\begin{indented}' => { printf("%s:%zd:%zd\n", "\\begin{indented}",ts-in,te-in);};
'\\begin{inparaenum}' => { printf("%s:%zd:%zd\n", "\\begin{inparaenum}",ts-in,te-in);};
'\\begin{instit}' => { printf("%s:%zd:%zd\n", "\\begin{instit}",ts-in,te-in);};
'\\begin{i}' => { printf("%s:%zd:%zd\n", "\\begin{i}",ts-in,te-in);};
'\\begin{isabelle}' => { printf("%s:%zd:%zd\n", "\\begin{isabelle}",ts-in,te-in);};
'\\begin{itemize}' => { printf("%s:%zd:%zd\n", "\\begin{itemize}",ts-in,te-in);};
'\\begin{iteMize}' => { printf("%s:%zd:%zd\n", "\\begin{iteMize}",ts-in,te-in);};
'\\begin{Itemize}' => { printf("%s:%zd:%zd\n", "\\begin{Itemize}",ts-in,te-in);};
'\\begin{itemiz}' => { printf("%s:%zd:%zd\n", "\\begin{itemiz}",ts-in,te-in);};
'\\begin{itemlist}' => { printf("%s:%zd:%zd\n", "\\begin{itemlist}",ts-in,te-in);};
'\\begin{iteml}' => { printf("%s:%zd:%zd\n", "\\begin{iteml}",ts-in,te-in);};
'\\begin{it}' => { printf("%s:%zd:%zd\n", "\\begin{it}",ts-in,te-in);};
'\\begin{itshape}' => { printf("%s:%zd:%zd\n", "\\begin{itshape}",ts-in,te-in);};
'\\begin{key}' => { printf("%s:%zd:%zd\n", "\\begin{key}",ts-in,te-in);};
'\\begin{keys}' => { printf("%s:%zd:%zd\n", "\\begin{keys}",ts-in,te-in);};
'\\begin{keyword}' => { printf("%s:%zd:%zd\n", "\\begin{keyword}",ts-in,te-in);};
'\\begin{keywords}' => { printf("%s:%zd:%zd\n", "\\begin{keywords}",ts-in,te-in);};
'\\begin{labeling}' => { printf("%s:%zd:%zd\n", "\\begin{labeling}",ts-in,te-in);};
'\\begin{landscape}' => { printf("%s:%zd:%zd\n", "\\begin{landscape}",ts-in,te-in);};
'\\begin{lapdf}' => { printf("%s:%zd:%zd\n", "\\begin{lapdf}",ts-in,te-in);};
'\\begin{large}' => { printf("%s:%zd:%zd\n", "\\begin{large}",ts-in,te-in);};
'\\begin{Large}' => { printf("%s:%zd:%zd\n", "\\begin{Large}",ts-in,te-in);};
'\\begin{LARGE}' => { printf("%s:%zd:%zd\n", "\\begin{LARGE}",ts-in,te-in);};
'\\begin{latexonly}' => { printf("%s:%zd:%zd\n", "\\begin{latexonly}",ts-in,te-in);};
'\\begin{ldispl}' => { printf("%s:%zd:%zd\n", "\\begin{ldispl}",ts-in,te-in);};
'\\begin{lema}' => { printf("%s:%zd:%zd\n", "\\begin{lema}",ts-in,te-in);};
'\\begin{lemma}' => { printf("%s:%zd:%zd\n", "\\begin{lemma}",ts-in,te-in);};
'\\begin{Lemma}' => { printf("%s:%zd:%zd\n", "\\begin{Lemma}",ts-in,te-in);};
'\\begin{lemme}' => { printf("%s:%zd:%zd\n", "\\begin{lemme}",ts-in,te-in);};
'\\begin{lemm}' => { printf("%s:%zd:%zd\n", "\\begin{lemm}",ts-in,te-in);};
'\\begin{lem}' => { printf("%s:%zd:%zd\n", "\\begin{lem}",ts-in,te-in);};
'\\begin{Lem}' => { printf("%s:%zd:%zd\n", "\\begin{Lem}",ts-in,te-in);};
'\\begin{Le}' => { printf("%s:%zd:%zd\n", "\\begin{Le}",ts-in,te-in);};
'\\begin{letter}' => { printf("%s:%zd:%zd\n", "\\begin{letter}",ts-in,te-in);};
'\\begin{linenomath}' => { printf("%s:%zd:%zd\n", "\\begin{linenomath}",ts-in,te-in);};
'\\begin{linenumbers}' => { printf("%s:%zd:%zd\n", "\\begin{linenumbers}",ts-in,te-in);};
'\\begin{listingcodefile}' => { printf("%s:%zd:%zd\n", "\\begin{listingcodefile}",ts-in,te-in);};
'\\begin{listing}' => { printf("%s:%zd:%zd\n", "\\begin{listing}",ts-in,te-in);};
'\\begin{list}' => { printf("%s:%zd:%zd\n", "\\begin{list}",ts-in,te-in);};
'\\begin{lmm}' => { printf("%s:%zd:%zd\n", "\\begin{lmm}",ts-in,te-in);};
'\\begin{lm}' => { printf("%s:%zd:%zd\n", "\\begin{lm}",ts-in,te-in);};
'\\begin{longlist}' => { printf("%s:%zd:%zd\n", "\\begin{longlist}",ts-in,te-in);};
'\\begin{longtable}' => { printf("%s:%zd:%zd\n", "\\begin{longtable}",ts-in,te-in);};
'\\begin{lrbox}' => { printf("%s:%zd:%zd\n", "\\begin{lrbox}",ts-in,te-in);};
'\\begin{lstcode}' => { printf("%s:%zd:%zd\n", "\\begin{lstcode}",ts-in,te-in);};
'\\begin{lstlisting}' => { printf("%s:%zd:%zd\n", "\\begin{lstlisting}",ts-in,te-in);};
'\\begin{LTXexample}' => { printf("%s:%zd:%zd\n", "\\begin{LTXexample}",ts-in,te-in);};
'\\begin{lyxcode}' => { printf("%s:%zd:%zd\n", "\\begin{lyxcode}",ts-in,te-in);};
'\\begin{lyxgreyedout}' => { printf("%s:%zd:%zd\n", "\\begin{lyxgreyedout}",ts-in,te-in);};
'\\begin{macrocode}' => { printf("%s:%zd:%zd\n", "\\begin{macrocode}",ts-in,te-in);};
'\\begin{macro}' => { printf("%s:%zd:%zd\n", "\\begin{macro}",ts-in,te-in);};
'\\begin{maintheorem}' => { printf("%s:%zd:%zd\n", "\\begin{maintheorem}",ts-in,te-in);};
'\\begin{ma}' => { printf("%s:%zd:%zd\n", "\\begin{ma}",ts-in,te-in);};
'\\begin{marginfigure}' => { printf("%s:%zd:%zd\n", "\\begin{marginfigure}",ts-in,te-in);};
'\\begin{mathcal}' => { printf("%s:%zd:%zd\n", "\\begin{mathcal}",ts-in,te-in);};
'\\begin{mathletters}' => { printf("%s:%zd:%zd\n", "\\begin{mathletters}",ts-in,te-in);};
'\\begin{mathpar}' => { printf("%s:%zd:%zd\n", "\\begin{mathpar}",ts-in,te-in);};
'\\begin{math}' => { printf("%s:%zd:%zd\n", "\\begin{math}",ts-in,te-in);};
'\\begin{mat}' => { printf("%s:%zd:%zd\n", "\\begin{mat}",ts-in,te-in);};
'\\begin{matrix}' => { printf("%s:%zd:%zd\n", "\\begin{matrix}",ts-in,te-in);};
'\\begin{mcline}' => { printf("%s:%zd:%zd\n", "\\begin{mcline}",ts-in,te-in);};
'\\begin{mdframed}' => { printf("%s:%zd:%zd\n", "\\begin{mdframed}",ts-in,te-in);};
'\\begin{mdline}' => { printf("%s:%zd:%zd\n", "\\begin{mdline}",ts-in,te-in);};
'\\begin{minipage}' => { printf("%s:%zd:%zd\n", "\\begin{minipage}",ts-in,te-in);};
'\\begin{minted}' => { printf("%s:%zd:%zd\n", "\\begin{minted}",ts-in,te-in);};
'\\begin{mizar}' => { printf("%s:%zd:%zd\n", "\\begin{mizar}",ts-in,te-in);};
'\\begin{mmraw}' => { printf("%s:%zd:%zd\n", "\\begin{mmraw}",ts-in,te-in);};
'\\begin{multicols}' => { printf("%s:%zd:%zd\n", "\\begin{multicols}",ts-in,te-in);};
'\\begin{multi}' => { printf("%s:%zd:%zd\n", "\\begin{multi}",ts-in,te-in);};
'\\begin{multlined}' => { printf("%s:%zd:%zd\n", "\\begin{multlined}",ts-in,te-in);};
'\\begin{multline}' => { printf("%s:%zd:%zd\n", "\\begin{multline}",ts-in,te-in);};
'\\begin{myact}' => { printf("%s:%zd:%zd\n", "\\begin{myact}",ts-in,te-in);};
'\\begin{mybilan}' => { printf("%s:%zd:%zd\n", "\\begin{mybilan}",ts-in,te-in);};
'\\begin{mydef}' => { printf("%s:%zd:%zd\n", "\\begin{mydef}",ts-in,te-in);};
'\\begin{myenumerate}' => { printf("%s:%zd:%zd\n", "\\begin{myenumerate}",ts-in,te-in);};
'\\begin{myeqnarray}' => { printf("%s:%zd:%zd\n", "\\begin{myeqnarray}",ts-in,te-in);};
'\\begin{myequation}' => { printf("%s:%zd:%zd\n", "\\begin{myequation}",ts-in,te-in);};
'\\begin{myexos}' => { printf("%s:%zd:%zd\n", "\\begin{myexos}",ts-in,te-in);};
'\\begin{myimage}' => { printf("%s:%zd:%zd\n", "\\begin{myimage}",ts-in,te-in);};
'\\begin{mylemma}' => { printf("%s:%zd:%zd\n", "\\begin{mylemma}",ts-in,te-in);};
'\\begin{myproof}' => { printf("%s:%zd:%zd\n", "\\begin{myproof}",ts-in,te-in);};
'\\begin{myprop}' => { printf("%s:%zd:%zd\n", "\\begin{myprop}",ts-in,te-in);};
'\\begin{mytheorem}' => { printf("%s:%zd:%zd\n", "\\begin{mytheorem}",ts-in,te-in);};
'\\begin{Myverb}' => { printf("%s:%zd:%zd\n", "\\begin{Myverb}",ts-in,te-in);};
'\\begin{Name}' => { printf("%s:%zd:%zd\n", "\\begin{Name}",ts-in,te-in);};
'\\begin{narrow}' => { printf("%s:%zd:%zd\n", "\\begin{narrow}",ts-in,te-in);};
'\\begin{nd}' => { printf("%s:%zd:%zd\n", "\\begin{nd}",ts-in,te-in);};
'\\begin{NewMacroBox}' => { printf("%s:%zd:%zd\n", "\\begin{NewMacroBox}",ts-in,te-in);};
'\\begin{nlem}' => { printf("%s:%zd:%zd\n", "\\begin{nlem}",ts-in,te-in);};
'\\begin{normalsize}' => { printf("%s:%zd:%zd\n", "\\begin{normalsize}",ts-in,te-in);};
'\\begin{nota}' => { printf("%s:%zd:%zd\n", "\\begin{nota}",ts-in,te-in);};
'\\begin{notation}' => { printf("%s:%zd:%zd\n", "\\begin{notation}",ts-in,te-in);};
'\\begin{note}' => { printf("%s:%zd:%zd\n", "\\begin{note}",ts-in,te-in);};
'\\begin{Note}' => { printf("%s:%zd:%zd\n", "\\begin{Note}",ts-in,te-in);};
'\\begin{numcases}' => { printf("%s:%zd:%zd\n", "\\begin{numcases}",ts-in,te-in);};
'\\begin{NumericDataPlot}' => { printf("%s:%zd:%zd\n", "\\begin{NumericDataPlot}",ts-in,te-in);};
'\\begin{observation}' => { printf("%s:%zd:%zd\n", "\\begin{observation}",ts-in,te-in);};
'\\begin{obs}' => { printf("%s:%zd:%zd\n", "\\begin{obs}",ts-in,te-in);};
'\\begin{ocamlindent}' => { printf("%s:%zd:%zd\n", "\\begin{ocamlindent}",ts-in,te-in);};
'\\begin{ocamltabular}' => { printf("%s:%zd:%zd\n", "\\begin{ocamltabular}",ts-in,te-in);};
'\\begin{opening}' => { printf("%s:%zd:%zd\n", "\\begin{opening}",ts-in,te-in);};
'\\begin{option}' => { printf("%s:%zd:%zd\n", "\\begin{option}",ts-in,te-in);};
'\\begin{optiontableAuto}' => { printf("%s:%zd:%zd\n", "\\begin{optiontableAuto}",ts-in,te-in);};
'\\begin{otherlanguage}' => { printf("%s:%zd:%zd\n", "\\begin{otherlanguage}",ts-in,te-in);};
'\\begin{outline}' => { printf("%s:%zd:%zd\n", "\\begin{outline}",ts-in,te-in);};
'\\begin{overpic}' => { printf("%s:%zd:%zd\n", "\\begin{overpic}",ts-in,te-in);};
'\\begin{packed_enum}' => { printf("%s:%zd:%zd\n", "\\begin{packed_enum}",ts-in,te-in);};
'\\begin{packed_itemize}' => { printf("%s:%zd:%zd\n", "\\begin{packed_itemize}",ts-in,te-in);};
'\\begin{participant}' => { printf("%s:%zd:%zd\n", "\\begin{participant}",ts-in,te-in);};
'\\begin{parts}' => { printf("%s:%zd:%zd\n", "\\begin{parts}",ts-in,te-in);};
'\\begin{pf}' => { printf("%s:%zd:%zd\n", "\\begin{pf}",ts-in,te-in);};
'\\begin{pgfmagnify}' => { printf("%s:%zd:%zd\n", "\\begin{pgfmagnify}",ts-in,te-in);};
'\\begin{pgfmanualentry}' => { printf("%s:%zd:%zd\n", "\\begin{pgfmanualentry}",ts-in,te-in);};
'\\begin{pgfonlayer}' => { printf("%s:%zd:%zd\n", "\\begin{pgfonlayer}",ts-in,te-in);};
'\\begin{pgfpicture}' => { printf("%s:%zd:%zd\n", "\\begin{pgfpicture}",ts-in,te-in);};
'\\begin{pgfscope}' => { printf("%s:%zd:%zd\n", "\\begin{pgfscope}",ts-in,te-in);};
'\\begin{pgftranslate}' => { printf("%s:%zd:%zd\n", "\\begin{pgftranslate}",ts-in,te-in);};
'\\begin{picture}' => { printf("%s:%zd:%zd\n", "\\begin{picture}",ts-in,te-in);};
'\\begin{plain}' => { printf("%s:%zd:%zd\n", "\\begin{plain}",ts-in,te-in);};
'\\begin{pmatrix}' => { printf("%s:%zd:%zd\n", "\\begin{pmatrix}",ts-in,te-in);};
'\\begin{p}' => { printf("%s:%zd:%zd\n", "\\begin{p}",ts-in,te-in);};
'\\begin{Presented}' => { printf("%s:%zd:%zd\n", "\\begin{Presented}",ts-in,te-in);};
'\\begin{preuve}' => { printf("%s:%zd:%zd\n", "\\begin{preuve}",ts-in,te-in);};
'\\begin{prf}' => { printf("%s:%zd:%zd\n", "\\begin{prf}",ts-in,te-in);};
'\\begin{problem}' => { printf("%s:%zd:%zd\n", "\\begin{problem}",ts-in,te-in);};
'\\begin{prob}' => { printf("%s:%zd:%zd\n", "\\begin{prob}",ts-in,te-in);};
'\\begin{prog}' => { printf("%s:%zd:%zd\n", "\\begin{prog}",ts-in,te-in);};
'\\begin{programlisting}' => { printf("%s:%zd:%zd\n", "\\begin{programlisting}",ts-in,te-in);};
'\\begin{proofclaim}' => { printf("%s:%zd:%zd\n", "\\begin{proofclaim}",ts-in,te-in);};
'\\begin{proofof}' => { printf("%s:%zd:%zd\n", "\\begin{proofof}",ts-in,te-in);};
'\\begin{proofP}' => { printf("%s:%zd:%zd\n", "\\begin{proofP}",ts-in,te-in);};
'\\begin{proof}' => { printf("%s:%zd:%zd\n", "\\begin{proof}",ts-in,te-in);};
'\\begin{Proof}' => { printf("%s:%zd:%zd\n", "\\begin{Proof}",ts-in,te-in);};
'\\begin{PROOF}' => { printf("%s:%zd:%zd\n", "\\begin{PROOF}",ts-in,te-in);};
'\\begin{prooftree}' => { printf("%s:%zd:%zd\n", "\\begin{prooftree}",ts-in,te-in);};
'\\begin{property}' => { printf("%s:%zd:%zd\n", "\\begin{property}",ts-in,te-in);};
'\\begin{propn}' => { printf("%s:%zd:%zd\n", "\\begin{propn}",ts-in,te-in);};
'\\begin{propo}' => { printf("%s:%zd:%zd\n", "\\begin{propo}",ts-in,te-in);};
'\\begin{propose}' => { printf("%s:%zd:%zd\n", "\\begin{propose}",ts-in,te-in);};
'\\begin{proposition}' => { printf("%s:%zd:%zd\n", "\\begin{proposition}",ts-in,te-in);};
'\\begin{Proposition}' => { printf("%s:%zd:%zd\n", "\\begin{Proposition}",ts-in,te-in);};
'\\begin{propos}' => { printf("%s:%zd:%zd\n", "\\begin{propos}",ts-in,te-in);};
'\\begin{prop}' => { printf("%s:%zd:%zd\n", "\\begin{prop}",ts-in,te-in);};
'\\begin{Prop}' => { printf("%s:%zd:%zd\n", "\\begin{Prop}",ts-in,te-in);};
'\\begin{pro}' => { printf("%s:%zd:%zd\n", "\\begin{pro}",ts-in,te-in);};
'\\begin{Pro}' => { printf("%s:%zd:%zd\n", "\\begin{Pro}",ts-in,te-in);};
'\\begin{proveit}' => { printf("%s:%zd:%zd\n", "\\begin{proveit}",ts-in,te-in);};
'\\begin{prp}' => { printf("%s:%zd:%zd\n", "\\begin{prp}",ts-in,te-in);};
'\\begin{pr}' => { printf("%s:%zd:%zd\n", "\\begin{pr}",ts-in,te-in);};
'\\begin{psfrags}' => { printf("%s:%zd:%zd\n", "\\begin{psfrags}",ts-in,te-in);};
'\\begin{psmatrix}' => { printf("%s:%zd:%zd\n", "\\begin{psmatrix}",ts-in,te-in);};
'\\begin{pspicture}' => { printf("%s:%zd:%zd\n", "\\begin{pspicture}",ts-in,te-in);};
'\\begin{publist}' => { printf("%s:%zd:%zd\n", "\\begin{publist}",ts-in,te-in);};
'\\begin{qstest}' => { printf("%s:%zd:%zd\n", "\\begin{qstest}",ts-in,te-in);};
'\\begin{ques}' => { printf("%s:%zd:%zd\n", "\\begin{ques}",ts-in,te-in);};
'\\begin{question}' => { printf("%s:%zd:%zd\n", "\\begin{question}",ts-in,te-in);};
'\\begin{questions}' => { printf("%s:%zd:%zd\n", "\\begin{questions}",ts-in,te-in);};
'\\begin{quest}' => { printf("%s:%zd:%zd\n", "\\begin{quest}",ts-in,te-in);};
'\\begin{quiz}' => { printf("%s:%zd:%zd\n", "\\begin{quiz}",ts-in,te-in);};
'\\begin{quotation}' => { printf("%s:%zd:%zd\n", "\\begin{quotation}",ts-in,te-in);};
'\\begin{quote}' => { printf("%s:%zd:%zd\n", "\\begin{quote}",ts-in,te-in);};
'\\begin{quoting}' => { printf("%s:%zd:%zd\n", "\\begin{quoting}",ts-in,te-in);};
'\\begin{raggedleft}' => { printf("%s:%zd:%zd\n", "\\begin{raggedleft}",ts-in,te-in);};
'\\begin{raggedright}' => { printf("%s:%zd:%zd\n", "\\begin{raggedright}",ts-in,te-in);};
'\\begin{rawhtml}' => { printf("%s:%zd:%zd\n", "\\begin{rawhtml}",ts-in,te-in);};
'\\begin{refdescription}' => { printf("%s:%zd:%zd\n", "\\begin{refdescription}",ts-in,te-in);};
'\\begin{references}' => { printf("%s:%zd:%zd\n", "\\begin{references}",ts-in,te-in);};
'\\begin{refnotes}' => { printf("%s:%zd:%zd\n", "\\begin{refnotes}",ts-in,te-in);};
'\\begin{refparameters}' => { printf("%s:%zd:%zd\n", "\\begin{refparameters}",ts-in,te-in);};
'\\begin{refreturn}' => { printf("%s:%zd:%zd\n", "\\begin{refreturn}",ts-in,te-in);};
'\\begin{rema}' => { printf("%s:%zd:%zd\n", "\\begin{rema}",ts-in,te-in);};
'\\begin{remarkk}' => { printf("%s:%zd:%zd\n", "\\begin{remarkk}",ts-in,te-in);};
'\\begin{remark}' => { printf("%s:%zd:%zd\n", "\\begin{remark}",ts-in,te-in);};
'\\begin{Remark}' => { printf("%s:%zd:%zd\n", "\\begin{Remark}",ts-in,te-in);};
'\\begin{remarks}' => { printf("%s:%zd:%zd\n", "\\begin{remarks}",ts-in,te-in);};
'\\begin{remarque}' => { printf("%s:%zd:%zd\n", "\\begin{remarque}",ts-in,te-in);};
'\\begin{remk}' => { printf("%s:%zd:%zd\n", "\\begin{remk}",ts-in,te-in);};
'\\begin{rem}' => { printf("%s:%zd:%zd\n", "\\begin{rem}",ts-in,te-in);};
'\\begin{Rem}' => { printf("%s:%zd:%zd\n", "\\begin{Rem}",ts-in,te-in);};
'\\begin{rems}' => { printf("%s:%zd:%zd\n", "\\begin{rems}",ts-in,te-in);};
'\\begin{reponses}' => { printf("%s:%zd:%zd\n", "\\begin{reponses}",ts-in,te-in);};
'\\begin{reptheorem}' => { printf("%s:%zd:%zd\n", "\\begin{reptheorem}",ts-in,te-in);};
'\\begin{requirement}' => { printf("%s:%zd:%zd\n", "\\begin{requirement}",ts-in,te-in);};
'\\begin{restatable}' => { printf("%s:%zd:%zd\n", "\\begin{restatable}",ts-in,te-in);};
'\\begin{result}' => { printf("%s:%zd:%zd\n", "\\begin{result}",ts-in,te-in);};
'\\begin{rk}' => { printf("%s:%zd:%zd\n", "\\begin{rk}",ts-in,te-in);};
'\\begin{rmk}' => { printf("%s:%zd:%zd\n", "\\begin{rmk}",ts-in,te-in);};
'\\begin{Rmk}' => { printf("%s:%zd:%zd\n", "\\begin{Rmk}",ts-in,te-in);};
'\\begin{rmq}' => { printf("%s:%zd:%zd\n", "\\begin{rmq}",ts-in,te-in);};
'\\begin{rmr}' => { printf("%s:%zd:%zd\n", "\\begin{rmr}",ts-in,te-in);};
'\\begin{romanlist}' => { printf("%s:%zd:%zd\n", "\\begin{romanlist}",ts-in,te-in);};
'\\begin{rotate}' => { printf("%s:%zd:%zd\n", "\\begin{rotate}",ts-in,te-in);};
'\\begin{ruledtabular}' => { printf("%s:%zd:%zd\n", "\\begin{ruledtabular}",ts-in,te-in);};
'\\begin{Russian}' => { printf("%s:%zd:%zd\n", "\\begin{Russian}",ts-in,te-in);};
'\\begin{sagecommandline}' => { printf("%s:%zd:%zd\n", "\\begin{sagecommandline}",ts-in,te-in);};
'\\begin{samepage}' => { printf("%s:%zd:%zd\n", "\\begin{samepage}",ts-in,te-in);};
'\\begin{satz}' => { printf("%s:%zd:%zd\n", "\\begin{satz}",ts-in,te-in);};
'\\begin{Satz}' => { printf("%s:%zd:%zd\n", "\\begin{Satz}",ts-in,te-in);};
'\\begin{savenotes}' => { printf("%s:%zd:%zd\n", "\\begin{savenotes}",ts-in,te-in);};
'\\begin{Sb}' => { printf("%s:%zd:%zd\n", "\\begin{Sb}",ts-in,te-in);};
'\\begin{SCfigure}' => { printf("%s:%zd:%zd\n", "\\begin{SCfigure}",ts-in,te-in);};
'\\begin{Schunk}' => { printf("%s:%zd:%zd\n", "\\begin{Schunk}",ts-in,te-in);};
'\\begin{scope}' => { printf("%s:%zd:%zd\n", "\\begin{scope}",ts-in,te-in);};
'\\begin{scriptsize}' => { printf("%s:%zd:%zd\n", "\\begin{scriptsize}",ts-in,te-in);};
'\\begin{section}' => { printf("%s:%zd:%zd\n", "\\begin{section}",ts-in,te-in);};
'\\begin{sectionunit}' => { printf("%s:%zd:%zd\n", "\\begin{sectionunit}",ts-in,te-in);};
'\\begin{sequencediagram}' => { printf("%s:%zd:%zd\n", "\\begin{sequencediagram}",ts-in,te-in);};
'\\begin{ShowOutput}' => { printf("%s:%zd:%zd\n", "\\begin{ShowOutput}",ts-in,te-in);};
'\\begin{sidewaysfigure}' => { printf("%s:%zd:%zd\n", "\\begin{sidewaysfigure}",ts-in,te-in);};
'\\begin{sideways}' => { printf("%s:%zd:%zd\n", "\\begin{sideways}",ts-in,te-in);};
'\\begin{sidewaystable}' => { printf("%s:%zd:%zd\n", "\\begin{sidewaystable}",ts-in,te-in);};
'\\begin{singlespace}' => { printf("%s:%zd:%zd\n", "\\begin{singlespace}",ts-in,te-in);};
'\\begin{Sinput}' => { printf("%s:%zd:%zd\n", "\\begin{Sinput}",ts-in,te-in);};
'\\begin{slide}' => { printf("%s:%zd:%zd\n", "\\begin{slide}",ts-in,te-in);};
'\\begin{sli}' => { printf("%s:%zd:%zd\n", "\\begin{sli}",ts-in,te-in);};
'\\begin{sloppypar}' => { printf("%s:%zd:%zd\n", "\\begin{sloppypar}",ts-in,te-in);};
'\\begin{smallmatrix}' => { printf("%s:%zd:%zd\n", "\\begin{smallmatrix}",ts-in,te-in);};
'\\begin{small}' => { printf("%s:%zd:%zd\n", "\\begin{small}",ts-in,te-in);};
'\\begin{solution}' => { printf("%s:%zd:%zd\n", "\\begin{solution}",ts-in,te-in);};
'\\begin{spacing}' => { printf("%s:%zd:%zd\n", "\\begin{spacing}",ts-in,te-in);};
'\\begin{spec}' => { printf("%s:%zd:%zd\n", "\\begin{spec}",ts-in,te-in);};
'\\begin{split}' => { printf("%s:%zd:%zd\n", "\\begin{split}",ts-in,te-in);};
'\\begin{statement}' => { printf("%s:%zd:%zd\n", "\\begin{statement}",ts-in,te-in);};
'\\begin{step}' => { printf("%s:%zd:%zd\n", "\\begin{step}",ts-in,te-in);};
'\\begin{subarray}' => { printf("%s:%zd:%zd\n", "\\begin{subarray}",ts-in,te-in);};
'\\begin{subbibitems}' => { printf("%s:%zd:%zd\n", "\\begin{subbibitems}",ts-in,te-in);};
'\\begin{subentry}' => { printf("%s:%zd:%zd\n", "\\begin{subentry}",ts-in,te-in);};
'\\begin{subeqnarray}' => { printf("%s:%zd:%zd\n", "\\begin{subeqnarray}",ts-in,te-in);};
'\\begin{subeqn}' => { printf("%s:%zd:%zd\n", "\\begin{subeqn}",ts-in,te-in);};
'\\begin{subequation}' => { printf("%s:%zd:%zd\n", "\\begin{subequation}",ts-in,te-in);};
'\\begin{subequations}' => { printf("%s:%zd:%zd\n", "\\begin{subequations}",ts-in,te-in);};
'\\begin{subfigure}' => { printf("%s:%zd:%zd\n", "\\begin{subfigure}",ts-in,te-in);};
'\\begin{sublemma}' => { printf("%s:%zd:%zd\n", "\\begin{sublemma}",ts-in,te-in);};
'\\begin{subparts}' => { printf("%s:%zd:%zd\n", "\\begin{subparts}",ts-in,te-in);};
'\\begin{sub}' => { printf("%s:%zd:%zd\n", "\\begin{sub}",ts-in,te-in);};
'\\begin{subproof}' => { printf("%s:%zd:%zd\n", "\\begin{subproof}",ts-in,te-in);};
'\\begin{subsection}' => { printf("%s:%zd:%zd\n", "\\begin{subsection}",ts-in,te-in);};
'\\begin{subsub}' => { printf("%s:%zd:%zd\n", "\\begin{subsub}",ts-in,te-in);};
'\\begin{subsubsection}' => { printf("%s:%zd:%zd\n", "\\begin{subsubsection}",ts-in,te-in);};
'\\begin{subtable}' => { printf("%s:%zd:%zd\n", "\\begin{subtable}",ts-in,te-in);};
'\\begin{supertabular}' => { printf("%s:%zd:%zd\n", "\\begin{supertabular}",ts-in,te-in);};
'\\begin{supplement}' => { printf("%s:%zd:%zd\n", "\\begin{supplement}",ts-in,te-in);};
'\\begin{tabbing}' => { printf("%s:%zd:%zd\n", "\\begin{tabbing}",ts-in,te-in);};
'\\begin{tablenotes}' => { printf("%s:%zd:%zd\n", "\\begin{tablenotes}",ts-in,te-in);};
'\\begin{table}' => { printf("%s:%zd:%zd\n", "\\begin{table}",ts-in,te-in);};
'\\begin{tabular}' => { printf("%s:%zd:%zd\n", "\\begin{tabular}",ts-in,te-in);};
'\\begin{tabularx}' => { printf("%s:%zd:%zd\n", "\\begin{tabularx}",ts-in,te-in);};
'\\begin{tabulary}' => { printf("%s:%zd:%zd\n", "\\begin{tabulary}",ts-in,te-in);};
'\\begin{tcolorbox}' => { printf("%s:%zd:%zd\n", "\\begin{tcolorbox}",ts-in,te-in);};
'\\begin{teo}' => { printf("%s:%zd:%zd\n", "\\begin{teo}",ts-in,te-in);};
'\\begin{teorema}' => { printf("%s:%zd:%zd\n", "\\begin{teorema}",ts-in,te-in);};
'\\begin{term}' => { printf("%s:%zd:%zd\n", "\\begin{term}",ts-in,te-in);};
'\\begin{texdraw}' => { printf("%s:%zd:%zd\n", "\\begin{texdraw}",ts-in,te-in);};
'\\begin{textblock}' => { printf("%s:%zd:%zd\n", "\\begin{textblock}",ts-in,te-in);};
'\\begin{theacknowledgments}' => { printf("%s:%zd:%zd\n", "\\begin{theacknowledgments}",ts-in,te-in);};
'\\begin{thebibliography}' => { printf("%s:%zd:%zd\n", "\\begin{thebibliography}",ts-in,te-in);};
'\\begin{theo}' => { printf("%s:%zd:%zd\n", "\\begin{theo}",ts-in,te-in);};
'\\begin{theoreme}' => { printf("%s:%zd:%zd\n", "\\begin{theoreme}",ts-in,te-in);};
'\\begin{theorem}' => { printf("%s:%zd:%zd\n", "\\begin{theorem}",ts-in,te-in);};
'\\begin{Theorem}' => { printf("%s:%zd:%zd\n", "\\begin{Theorem}",ts-in,te-in);};
'\\begin{theor}' => { printf("%s:%zd:%zd\n", "\\begin{theor}",ts-in,te-in);};
'\\begin{The}' => { printf("%s:%zd:%zd\n", "\\begin{The}",ts-in,te-in);};
'\\begin{thmm}' => { printf("%s:%zd:%zd\n", "\\begin{thmm}",ts-in,te-in);};
'\\begin{thm}' => { printf("%s:%zd:%zd\n", "\\begin{thm}",ts-in,te-in);};
'\\begin{Thm}' => { printf("%s:%zd:%zd\n", "\\begin{Thm}",ts-in,te-in);};
'\\begin{th}' => { printf("%s:%zd:%zd\n", "\\begin{th}",ts-in,te-in);};
'\\begin{Th}' => { printf("%s:%zd:%zd\n", "\\begin{Th}",ts-in,te-in);};
'\\begin{threeparttable}' => { printf("%s:%zd:%zd\n", "\\begin{threeparttable}",ts-in,te-in);};
'\\begin{thrm}' => { printf("%s:%zd:%zd\n", "\\begin{thrm}",ts-in,te-in);};
'\\begin{tight_itemize}' => { printf("%s:%zd:%zd\n", "\\begin{tight_itemize}",ts-in,te-in);};
'\\begin{tikzcd}' => { printf("%s:%zd:%zd\n", "\\begin{tikzcd}",ts-in,te-in);};
'\\begin{tikzpicture}' => { printf("%s:%zd:%zd\n", "\\begin{tikzpicture}",ts-in,te-in);};
'\\begin{tiny}' => { printf("%s:%zd:%zd\n", "\\begin{tiny}",ts-in,te-in);};
'\\begin{titlepage}' => { printf("%s:%zd:%zd\n", "\\begin{titlepage}",ts-in,te-in);};
'\\begin{title}' => { printf("%s:%zd:%zd\n", "\\begin{title}",ts-in,te-in);};
'\\begin{tkzexample}' => { printf("%s:%zd:%zd\n", "\\begin{tkzexample}",ts-in,te-in);};
'\\begin{tmvacode}' => { printf("%s:%zd:%zd\n", "\\begin{tmvacode}",ts-in,te-in);};
'\\begin{todolist}' => { printf("%s:%zd:%zd\n", "\\begin{todolist}",ts-in,te-in);};
'\\begin{T}' => { printf("%s:%zd:%zd\n", "\\begin{T}",ts-in,te-in);};
'\\begin{trivlist}' => { printf("%s:%zd:%zd\n", "\\begin{trivlist}",ts-in,te-in);};
'\\begin{ttbox}' => { printf("%s:%zd:%zd\n", "\\begin{ttbox}",ts-in,te-in);};
'\\begin{turnpage}' => { printf("%s:%zd:%zd\n", "\\begin{turnpage}",ts-in,te-in);};
'\\begin{turn}' => { printf("%s:%zd:%zd\n", "\\begin{turn}",ts-in,te-in);};
'\\begin{twomatrix}' => { printf("%s:%zd:%zd\n", "\\begin{twomatrix}",ts-in,te-in);};
'\\begin{txteq}' => { printf("%s:%zd:%zd\n", "\\begin{txteq}",ts-in,te-in);};
'\\begin{Ventry}' => { printf("%s:%zd:%zd\n", "\\begin{Ventry}",ts-in,te-in);};
'\\begin{verbatim}' => { printf("%s:%zd:%zd\n", "\\begin{verbatim}",ts-in,te-in);};
'\\begin{Verbatim}' => { printf("%s:%zd:%zd\n", "\\begin{Verbatim}",ts-in,te-in);};
'\\begin{verbatimtab}' => { printf("%s:%zd:%zd\n", "\\begin{verbatimtab}",ts-in,te-in);};
'\\begin{verse}' => { printf("%s:%zd:%zd\n", "\\begin{verse}",ts-in,te-in);};
'\\begin{vimcmdform}' => { printf("%s:%zd:%zd\n", "\\begin{vimcmdform}",ts-in,te-in);};
'\\begin{vimcode}' => { printf("%s:%zd:%zd\n", "\\begin{vimcode}",ts-in,te-in);};
'\\begin{vmatrix}' => { printf("%s:%zd:%zd\n", "\\begin{vmatrix}",ts-in,te-in);};
'\\begin{Vmatrix}' => { printf("%s:%zd:%zd\n", "\\begin{Vmatrix}",ts-in,te-in);};
'\\begin{warning}' => { printf("%s:%zd:%zd\n", "\\begin{warning}",ts-in,te-in);};
'\\begin{whycode}' => { printf("%s:%zd:%zd\n", "\\begin{whycode}",ts-in,te-in);};
'\\begin{widetext}' => { printf("%s:%zd:%zd\n", "\\begin{widetext}",ts-in,te-in);};
'\\begin{wpdeliv}' => { printf("%s:%zd:%zd\n", "\\begin{wpdeliv}",ts-in,te-in);};
'\\begin{wrapfigure}' => { printf("%s:%zd:%zd\n", "\\begin{wrapfigure}",ts-in,te-in);};
'\\begin{wraptable}' => { printf("%s:%zd:%zd\n", "\\begin{wraptable}",ts-in,te-in);};
'\\begin{xalignat}' => { printf("%s:%zd:%zd\n", "\\begin{xalignat}",ts-in,te-in);};
'\\begin{xy}' => { printf("%s:%zd:%zd\n", "\\begin{xy}",ts-in,te-in);};
'\\begin{young}' => { printf("%s:%zd:%zd\n", "\\begin{young}",ts-in,te-in);};
'\\end{abstract}' => { printf("%s:%zd:%zd\n", "\\end{abstract}",ts-in,te-in);};
'\\end{Abstract}' => { printf("%s:%zd:%zd\n", "\\end{Abstract}",ts-in,te-in);};
'\\end{acknowledgement}' => { printf("%s:%zd:%zd\n", "\\end{acknowledgement}",ts-in,te-in);};
'\\end{acknowledgements}' => { printf("%s:%zd:%zd\n", "\\end{acknowledgements}",ts-in,te-in);};
'\\end{acknowledgments}' => { printf("%s:%zd:%zd\n", "\\end{acknowledgments}",ts-in,te-in);};
'\\end{ack}' => { printf("%s:%zd:%zd\n", "\\end{ack}",ts-in,te-in);};
'\\end{adjustwidth}' => { printf("%s:%zd:%zd\n", "\\end{adjustwidth}",ts-in,te-in);};
'\\end{aeqns}' => { printf("%s:%zd:%zd\n", "\\end{aeqns}",ts-in,te-in);};
'\\end{alert}' => { printf("%s:%zd:%zd\n", "\\end{alert}",ts-in,te-in);};
'\\end{algorithm2e}' => { printf("%s:%zd:%zd\n", "\\end{algorithm2e}",ts-in,te-in);};
'\\end{algorithmic}' => { printf("%s:%zd:%zd\n", "\\end{algorithmic}",ts-in,te-in);};
'\\end{algorithm}' => { printf("%s:%zd:%zd\n", "\\end{algorithm}",ts-in,te-in);};
'\\end{alg}' => { printf("%s:%zd:%zd\n", "\\end{alg}",ts-in,te-in);};
'\\end{alignat}' => { printf("%s:%zd:%zd\n", "\\end{alignat}",ts-in,te-in);};
'\\end{alignedat}' => { printf("%s:%zd:%zd\n", "\\end{alignedat}",ts-in,te-in);};
'\\end{aligned}' => { printf("%s:%zd:%zd\n", "\\end{aligned}",ts-in,te-in);};
'\\end{align}' => { printf("%s:%zd:%zd\n", "\\end{align}",ts-in,te-in);};
'\\end{alltt}' => { printf("%s:%zd:%zd\n", "\\end{alltt}",ts-in,te-in);};
'\\end{alterqcm}' => { printf("%s:%zd:%zd\n", "\\end{alterqcm}",ts-in,te-in);};
'\\end{AMS}' => { printf("%s:%zd:%zd\n", "\\end{AMS}",ts-in,te-in);};
'\\end{anexample}' => { printf("%s:%zd:%zd\n", "\\end{anexample}",ts-in,te-in);};
'\\end{answer}' => { printf("%s:%zd:%zd\n", "\\end{answer}",ts-in,te-in);};
'\\end{answers}' => { printf("%s:%zd:%zd\n", "\\end{answers}",ts-in,te-in);};
'\\end{appendices}' => { printf("%s:%zd:%zd\n", "\\end{appendices}",ts-in,te-in);};
'\\end{appendix}' => { printf("%s:%zd:%zd\n", "\\end{appendix}",ts-in,te-in);};
'\\end{array}' => { printf("%s:%zd:%zd\n", "\\end{array}",ts-in,te-in);};
'\\end{article}' => { printf("%s:%zd:%zd\n", "\\end{article}",ts-in,te-in);};
'\\end{ass}' => { printf("%s:%zd:%zd\n", "\\end{ass}",ts-in,te-in);};
'\\end{assum}' => { printf("%s:%zd:%zd\n", "\\end{assum}",ts-in,te-in);};
'\\end{assumption}' => { printf("%s:%zd:%zd\n", "\\end{assumption}",ts-in,te-in);};
'\\end{asy}' => { printf("%s:%zd:%zd\n", "\\end{asy}",ts-in,te-in);};
'\\end{aug}' => { printf("%s:%zd:%zd\n", "\\end{aug}",ts-in,te-in);};
'\\end{axiom}' => { printf("%s:%zd:%zd\n", "\\end{axiom}",ts-in,te-in);};
'\\end{axis}' => { printf("%s:%zd:%zd\n", "\\end{axis}",ts-in,te-in);};
'\\end{barticle}' => { printf("%s:%zd:%zd\n", "\\end{barticle}",ts-in,te-in);};
'\\end{baytabular}' => { printf("%s:%zd:%zd\n", "\\end{baytabular}",ts-in,te-in);};
'\\end{bbook}' => { printf("%s:%zd:%zd\n", "\\end{bbook}",ts-in,te-in);};
'\\end{bem}' => { printf("%s:%zd:%zd\n", "\\end{bem}",ts-in,te-in);};
'\\end{beweis}' => { printf("%s:%zd:%zd\n", "\\end{beweis}",ts-in,te-in);};
'\\end{bf}' => { printf("%s:%zd:%zd\n", "\\end{bf}",ts-in,te-in);};
'\\end{bfseries}' => { printf("%s:%zd:%zd\n", "\\end{bfseries}",ts-in,te-in);};
'\\end{bibdiv}' => { printf("%s:%zd:%zd\n", "\\end{bibdiv}",ts-in,te-in);};
'\\end{biblist}' => { printf("%s:%zd:%zd\n", "\\end{biblist}",ts-in,te-in);};
'\\end{bincollection}' => { printf("%s:%zd:%zd\n", "\\end{bincollection}",ts-in,te-in);};
'\\end{binproceedings}' => { printf("%s:%zd:%zd\n", "\\end{binproceedings}",ts-in,te-in);};
'\\end{biography}' => { printf("%s:%zd:%zd\n", "\\end{biography}",ts-in,te-in);};
'\\end{blanko}' => { printf("%s:%zd:%zd\n", "\\end{blanko}",ts-in,te-in);};
'\\end{block}' => { printf("%s:%zd:%zd\n", "\\end{block}",ts-in,te-in);};
'\\end{bmatrix}' => { printf("%s:%zd:%zd\n", "\\end{bmatrix}",ts-in,te-in);};
'\\end{Bmatrix}' => { printf("%s:%zd:%zd\n", "\\end{Bmatrix}",ts-in,te-in);};
'\\end{bmisc}' => { printf("%s:%zd:%zd\n", "\\end{bmisc}",ts-in,te-in);};
'\\end{Body}' => { printf("%s:%zd:%zd\n", "\\end{Body}",ts-in,te-in);};
'\\end{boxedminipage}' => { printf("%s:%zd:%zd\n", "\\end{boxedminipage}",ts-in,te-in);};
'\\end{call}' => { printf("%s:%zd:%zd\n", "\\end{call}",ts-in,te-in);};
'\\end{cal}' => { printf("%s:%zd:%zd\n", "\\end{cal}",ts-in,te-in);};
'\\end{captionbeside}' => { printf("%s:%zd:%zd\n", "\\end{captionbeside}",ts-in,te-in);};
'\\end{caption}' => { printf("%s:%zd:%zd\n", "\\end{caption}",ts-in,te-in);};
'\\end{cartonaugh}' => { printf("%s:%zd:%zd\n", "\\end{cartonaugh}",ts-in,te-in);};
'\\end{case}' => { printf("%s:%zd:%zd\n", "\\end{case}",ts-in,te-in);};
'\\end{cases}' => { printf("%s:%zd:%zd\n", "\\end{cases}",ts-in,te-in);};
'\\end{CD}' => { printf("%s:%zd:%zd\n", "\\end{CD}",ts-in,te-in);};
'\\end{centering}' => { printf("%s:%zd:%zd\n", "\\end{centering}",ts-in,te-in);};
'\\end{centerline}' => { printf("%s:%zd:%zd\n", "\\end{centerline}",ts-in,te-in);};
'\\end{center}' => { printf("%s:%zd:%zd\n", "\\end{center}",ts-in,te-in);};
'\\end{chair}' => { printf("%s:%zd:%zd\n", "\\end{chair}",ts-in,te-in);};
'\\end{changemargin}' => { printf("%s:%zd:%zd\n", "\\end{changemargin}",ts-in,te-in);};
'\\end{chapterendexercises}' => { printf("%s:%zd:%zd\n", "\\end{chapterendexercises}",ts-in,te-in);};
'\\end{chapthebibliography}' => { printf("%s:%zd:%zd\n", "\\end{chapthebibliography}",ts-in,te-in);};
'\\end{choices}' => { printf("%s:%zd:%zd\n", "\\end{choices}",ts-in,te-in);};
'\\end{claim}' => { printf("%s:%zd:%zd\n", "\\end{claim}",ts-in,te-in);};
'\\end{Claim}' => { printf("%s:%zd:%zd\n", "\\end{Claim}",ts-in,te-in);};
'\\end{class}' => { printf("%s:%zd:%zd\n", "\\end{class}",ts-in,te-in);};
'\\end{clue}' => { printf("%s:%zd:%zd\n", "\\end{clue}",ts-in,te-in);};
'\\end{codeexample}' => { printf("%s:%zd:%zd\n", "\\end{codeexample}",ts-in,te-in);};
'\\end{codefile}' => { printf("%s:%zd:%zd\n", "\\end{codefile}",ts-in,te-in);};
'\\end{code}' => { printf("%s:%zd:%zd\n", "\\end{code}",ts-in,te-in);};
'\\end{colormixin}' => { printf("%s:%zd:%zd\n", "\\end{colormixin}",ts-in,te-in);};
'\\end{color}' => { printf("%s:%zd:%zd\n", "\\end{color}",ts-in,te-in);};
'\\end{column}' => { printf("%s:%zd:%zd\n", "\\end{column}",ts-in,te-in);};
'\\end{columns}' => { printf("%s:%zd:%zd\n", "\\end{columns}",ts-in,te-in);};
'\\end{comment}' => { printf("%s:%zd:%zd\n", "\\end{comment}",ts-in,te-in);};
'\\end{compactenum}' => { printf("%s:%zd:%zd\n", "\\end{compactenum}",ts-in,te-in);};
'\\end{compactitem}' => { printf("%s:%zd:%zd\n", "\\end{compactitem}",ts-in,te-in);};
'\\end{com}' => { printf("%s:%zd:%zd\n", "\\end{com}",ts-in,te-in);};
'\\end{condition}' => { printf("%s:%zd:%zd\n", "\\end{condition}",ts-in,te-in);};
'\\end{cond}' => { printf("%s:%zd:%zd\n", "\\end{cond}",ts-in,te-in);};
'\\end{conjecture}' => { printf("%s:%zd:%zd\n", "\\end{conjecture}",ts-in,te-in);};
'\\end{conj}' => { printf("%s:%zd:%zd\n", "\\end{conj}",ts-in,te-in);};
'\\end{construction}' => { printf("%s:%zd:%zd\n", "\\end{construction}",ts-in,te-in);};
'\\end{contract}' => { printf("%s:%zd:%zd\n", "\\end{contract}",ts-in,te-in);};
'\\end{corollaire}' => { printf("%s:%zd:%zd\n", "\\end{corollaire}",ts-in,te-in);};
'\\end{corollary}' => { printf("%s:%zd:%zd\n", "\\end{corollary}",ts-in,te-in);};
'\\end{Corollary}' => { printf("%s:%zd:%zd\n", "\\end{Corollary}",ts-in,te-in);};
'\\end{corol}' => { printf("%s:%zd:%zd\n", "\\end{corol}",ts-in,te-in);};
'\\end{coro}' => { printf("%s:%zd:%zd\n", "\\end{coro}",ts-in,te-in);};
'\\end{cor}' => { printf("%s:%zd:%zd\n", "\\end{cor}",ts-in,te-in);};
'\\end{Cor}' => { printf("%s:%zd:%zd\n", "\\end{Cor}",ts-in,te-in);};
'\\end{corr}' => { printf("%s:%zd:%zd\n", "\\end{corr}",ts-in,te-in);};
'\\end{cproof}' => { printf("%s:%zd:%zd\n", "\\end{cproof}",ts-in,te-in);};
'\\end{dcases}' => { printf("%s:%zd:%zd\n", "\\end{dcases}",ts-in,te-in);};
'\\end{ddd}' => { printf("%s:%zd:%zd\n", "\\end{ddd}",ts-in,te-in);};
'\\end{Declaration}' => { printf("%s:%zd:%zd\n", "\\end{Declaration}",ts-in,te-in);};
'\\end{define}' => { printf("%s:%zd:%zd\n", "\\end{define}",ts-in,te-in);};
'\\end{definicion}' => { printf("%s:%zd:%zd\n", "\\end{definicion}",ts-in,te-in);};
'\\end{definition}' => { printf("%s:%zd:%zd\n", "\\end{definition}",ts-in,te-in);};
'\\end{Definition}' => { printf("%s:%zd:%zd\n", "\\end{Definition}",ts-in,te-in);};
'\\end{definizione}' => { printf("%s:%zd:%zd\n", "\\end{definizione}",ts-in,te-in);};
'\\end{defin}' => { printf("%s:%zd:%zd\n", "\\end{defin}",ts-in,te-in);};
'\\end{defi}' => { printf("%s:%zd:%zd\n", "\\end{defi}",ts-in,te-in);};
'\\end{Defi}' => { printf("%s:%zd:%zd\n", "\\end{Defi}",ts-in,te-in);};
'\\end{defn}' => { printf("%s:%zd:%zd\n", "\\end{defn}",ts-in,te-in);};
'\\end{Defn}' => { printf("%s:%zd:%zd\n", "\\end{Defn}",ts-in,te-in);};
'\\end{Def}' => { printf("%s:%zd:%zd\n", "\\end{Def}",ts-in,te-in);};
'\\end{deluxetable}' => { printf("%s:%zd:%zd\n", "\\end{deluxetable}",ts-in,te-in);};
'\\end{demo}' => { printf("%s:%zd:%zd\n", "\\end{demo}",ts-in,te-in);};
'\\end{de}' => { printf("%s:%zd:%zd\n", "\\end{de}",ts-in,te-in);};
'\\end{desclist}' => { printf("%s:%zd:%zd\n", "\\end{desclist}",ts-in,te-in);};
'\\end{description}' => { printf("%s:%zd:%zd\n", "\\end{description}",ts-in,te-in);};
'\\end{Description}' => { printf("%s:%zd:%zd\n", "\\end{Description}",ts-in,te-in);};
'\\end{desctabular}' => { printf("%s:%zd:%zd\n", "\\end{desctabular}",ts-in,te-in);};
'\\end{detail}' => { printf("%s:%zd:%zd\n", "\\end{detail}",ts-in,te-in);};
'\\end{Dfigures}' => { printf("%s:%zd:%zd\n", "\\end{Dfigures}",ts-in,te-in);};
'\\end{dfn}' => { printf("%s:%zd:%zd\n", "\\end{dfn}",ts-in,te-in);};
'\\end{df}' => { printf("%s:%zd:%zd\n", "\\end{df}",ts-in,te-in);};
'\\end{DGCpicture}' => { printf("%s:%zd:%zd\n", "\\end{DGCpicture}",ts-in,te-in);};
'\\end{diagram}' => { printf("%s:%zd:%zd\n", "\\end{diagram}",ts-in,te-in);};
'\\end{Diagram}' => { printf("%s:%zd:%zd\n", "\\end{Diagram}",ts-in,te-in);};
'\\end{displaymath}' => { printf("%s:%zd:%zd\n", "\\end{displaymath}",ts-in,te-in);};
'\\end{display}' => { printf("%s:%zd:%zd\n", "\\end{display}",ts-in,te-in);};
'\\end{displaystyle}' => { printf("%s:%zd:%zd\n", "\\end{displaystyle}",ts-in,te-in);};
'\\end{document} ' => { printf("%s:%zd:%zd\n", "\\end{document} ",ts-in,te-in);};
'\\end{document}' => { printf("%s:%zd:%zd\n", "\\end{document}",ts-in,te-in);};
'\\end{DoxyCompactItemize}' => { printf("%s:%zd:%zd\n", "\\end{DoxyCompactItemize}",ts-in,te-in);};
'\\end{DoxyCompactList}' => { printf("%s:%zd:%zd\n", "\\end{DoxyCompactList}",ts-in,te-in);};
'\\end{DoxyParamCaption}' => { printf("%s:%zd:%zd\n", "\\end{DoxyParamCaption}",ts-in,te-in);};
'\\end{DoxyParams}' => { printf("%s:%zd:%zd\n", "\\end{DoxyParams}",ts-in,te-in);};
'\\end{dq}' => { printf("%s:%zd:%zd\n", "\\end{dq}",ts-in,te-in);};
'\\end{DSPOpcodeBytefield}' => { printf("%s:%zd:%zd\n", "\\end{DSPOpcodeBytefield}",ts-in,te-in);};
'\\end{DSPOpcodeDescription}' => { printf("%s:%zd:%zd\n", "\\end{DSPOpcodeDescription}",ts-in,te-in);};
'\\end{DSPOpcodeFormat}' => { printf("%s:%zd:%zd\n", "\\end{DSPOpcodeFormat}",ts-in,te-in);};
'\\end{DSPOpcodeOperation}' => { printf("%s:%zd:%zd\n", "\\end{DSPOpcodeOperation}",ts-in,te-in);};
'\\end{DSPOpcode}' => { printf("%s:%zd:%zd\n", "\\end{DSPOpcode}",ts-in,te-in);};
'\\end{eg}' => { printf("%s:%zd:%zd\n", "\\end{eg}",ts-in,te-in);};
'\\end{empheq}' => { printf("%s:%zd:%zd\n", "\\end{empheq}",ts-in,te-in);};
'\\end{em}' => { printf("%s:%zd:%zd\n", "\\end{em}",ts-in,te-in);};
'\\end{English}' => { printf("%s:%zd:%zd\n", "\\end{English}",ts-in,te-in);};
'\\end{entry}' => { printf("%s:%zd:%zd\n", "\\end{entry}",ts-in,te-in);};
'\\end{enumerate}' => { printf("%s:%zd:%zd\n", "\\end{enumerate}",ts-in,te-in);};
'\\end{enum}' => { printf("%s:%zd:%zd\n", "\\end{enum}",ts-in,te-in);};
'\\end{Environment}' => { printf("%s:%zd:%zd\n", "\\end{Environment}",ts-in,te-in);};
'\\end{eqalignno}' => { printf("%s:%zd:%zd\n", "\\end{eqalignno}",ts-in,te-in);};
'\\end{eqalign}' => { printf("%s:%zd:%zd\n", "\\end{eqalign}",ts-in,te-in);};
'\\end{eqnarray}' => { printf("%s:%zd:%zd\n", "\\end{eqnarray}",ts-in,te-in);};
'\\end{Eqnarray}' => { printf("%s:%zd:%zd\n", "\\end{Eqnarray}",ts-in,te-in);};
'\\end{eqn}' => { printf("%s:%zd:%zd\n", "\\end{eqn}",ts-in,te-in);};
'\\end{eqntbl}' => { printf("%s:%zd:%zd\n", "\\end{eqntbl}",ts-in,te-in);};
'\\end{eq}' => { printf("%s:%zd:%zd\n", "\\end{eq}",ts-in,te-in);};
'\\end{equation}' => { printf("%s:%zd:%zd\n", "\\end{equation}",ts-in,te-in);};
'\\end{equ}' => { printf("%s:%zd:%zd\n", "\\end{equ}",ts-in,te-in);};
'\\end{equs}' => { printf("%s:%zd:%zd\n", "\\end{equs}",ts-in,te-in);};
'\\end{errdesc}' => { printf("%s:%zd:%zd\n", "\\end{errdesc}",ts-in,te-in);};
'\\end{example}' => { printf("%s:%zd:%zd\n", "\\end{example}",ts-in,te-in);};
'\\end{Example}' => { printf("%s:%zd:%zd\n", "\\end{Example}",ts-in,te-in);};
'\\end{examples}' => { printf("%s:%zd:%zd\n", "\\end{examples}",ts-in,te-in);};
'\\end{exam}' => { printf("%s:%zd:%zd\n", "\\end{exam}",ts-in,te-in);};
'\\end{exa}' => { printf("%s:%zd:%zd\n", "\\end{exa}",ts-in,te-in);};
'\\end{exe}' => { printf("%s:%zd:%zd\n", "\\end{exe}",ts-in,te-in);};
'\\end{exercice}' => { printf("%s:%zd:%zd\n", "\\end{exercice}",ts-in,te-in);};
'\\end{exercise}' => { printf("%s:%zd:%zd\n", "\\end{exercise}",ts-in,te-in);};
'\\end{exmp}' => { printf("%s:%zd:%zd\n", "\\end{exmp}",ts-in,te-in);};
'\\end{exm}' => { printf("%s:%zd:%zd\n", "\\end{exm}",ts-in,te-in);};
'\\end{Explain}' => { printf("%s:%zd:%zd\n", "\\end{Explain}",ts-in,te-in);};
'\\end{ex}' => { printf("%s:%zd:%zd\n", "\\end{ex}",ts-in,te-in);};
'\\end{Ex}' => { printf("%s:%zd:%zd\n", "\\end{Ex}",ts-in,te-in);};
'\\end{exs}' => { printf("%s:%zd:%zd\n", "\\end{exs}",ts-in,te-in);};
'\\end{fact}' => { printf("%s:%zd:%zd\n", "\\end{fact}",ts-in,te-in);};
'\\end{feynartspicture}' => { printf("%s:%zd:%zd\n", "\\end{feynartspicture}",ts-in,te-in);};
'\\end{figcap}' => { printf("%s:%zd:%zd\n", "\\end{figcap}",ts-in,te-in);};
'\\end{fig}' => { printf("%s:%zd:%zd\n", "\\end{fig}",ts-in,te-in);};
'\\end{figure}' => { printf("%s:%zd:%zd\n", "\\end{figure}",ts-in,te-in);};
'\\end{Figure}' => { printf("%s:%zd:%zd\n", "\\end{Figure}",ts-in,te-in);};
'\\end{filecontents}' => { printf("%s:%zd:%zd\n", "\\end{filecontents}",ts-in,te-in);};
'\\end{fixy}' => { printf("%s:%zd:%zd\n", "\\end{fixy}",ts-in,te-in);};
'\\end{flagdescription}' => { printf("%s:%zd:%zd\n", "\\end{flagdescription}",ts-in,te-in);};
'\\end{flalign}' => { printf("%s:%zd:%zd\n", "\\end{flalign}",ts-in,te-in);};
'\\end{floatingfigure}' => { printf("%s:%zd:%zd\n", "\\end{floatingfigure}",ts-in,te-in);};
'\\end{flushleft}' => { printf("%s:%zd:%zd\n", "\\end{flushleft}",ts-in,te-in);};
'\\end{flushright}' => { printf("%s:%zd:%zd\n", "\\end{flushright}",ts-in,te-in);};
'\\end{fmfchar}' => { printf("%s:%zd:%zd\n", "\\end{fmfchar}",ts-in,te-in);};
'\\end{fmffile}' => { printf("%s:%zd:%zd\n", "\\end{fmffile}",ts-in,te-in);};
'\\end{fmffor}' => { printf("%s:%zd:%zd\n", "\\end{fmffor}",ts-in,te-in);};
'\\end{fmfgraph}' => { printf("%s:%zd:%zd\n", "\\end{fmfgraph}",ts-in,te-in);};
'\\end{fminipage}' => { printf("%s:%zd:%zd\n", "\\end{fminipage}",ts-in,te-in);};
'\\end{footnote}' => { printf("%s:%zd:%zd\n", "\\end{footnote}",ts-in,te-in);};
'\\end{footnotesize}' => { printf("%s:%zd:%zd\n", "\\end{footnotesize}",ts-in,te-in);};
'\\end{formula}' => { printf("%s:%zd:%zd\n", "\\end{formula}",ts-in,te-in);};
'\\end{framed}' => { printf("%s:%zd:%zd\n", "\\end{framed}",ts-in,te-in);};
'\\end{frame}' => { printf("%s:%zd:%zd\n", "\\end{frame}",ts-in,te-in);};
'\\end{frontmatter}' => { printf("%s:%zd:%zd\n", "\\end{frontmatter}",ts-in,te-in);};
'\\end{fulllineitems}' => { printf("%s:%zd:%zd\n", "\\end{fulllineitems}",ts-in,te-in);};
'\\end{fullversion}' => { printf("%s:%zd:%zd\n", "\\end{fullversion}",ts-in,te-in);};
'\\end{gathered}' => { printf("%s:%zd:%zd\n", "\\end{gathered}",ts-in,te-in);};
'\\end{gather}' => { printf("%s:%zd:%zd\n", "\\end{gather}",ts-in,te-in);};
'\\end{HBox}' => { printf("%s:%zd:%zd\n", "\\end{HBox}",ts-in,te-in);};
'\\end{history}' => { printf("%s:%zd:%zd\n", "\\end{history}",ts-in,te-in);};
'\\end{htmlonly}' => { printf("%s:%zd:%zd\n", "\\end{htmlonly}",ts-in,te-in);};
'\\end{hypothesis}' => { printf("%s:%zd:%zd\n", "\\end{hypothesis}",ts-in,te-in);};
'\\end{hyp}' => { printf("%s:%zd:%zd\n", "\\end{hyp}",ts-in,te-in);};
'\\end{IEEEbiographynophoto}' => { printf("%s:%zd:%zd\n", "\\end{IEEEbiographynophoto}",ts-in,te-in);};
'\\end{IEEEbiography}' => { printf("%s:%zd:%zd\n", "\\end{IEEEbiography}",ts-in,te-in);};
'\\end{IEEEeqnarraybox}' => { printf("%s:%zd:%zd\n", "\\end{IEEEeqnarraybox}",ts-in,te-in);};
'\\end{IEEEeqnarray}' => { printf("%s:%zd:%zd\n", "\\end{IEEEeqnarray}",ts-in,te-in);};
'\\end{IEEEkeywords}' => { printf("%s:%zd:%zd\n", "\\end{IEEEkeywords}",ts-in,te-in);};
'\\end{IEEEproof}' => { printf("%s:%zd:%zd\n", "\\end{IEEEproof}",ts-in,te-in);};
'\\end{ignore}' => { printf("%s:%zd:%zd\n", "\\end{ignore}",ts-in,te-in);};
'\\end{indented}' => { printf("%s:%zd:%zd\n", "\\end{indented}",ts-in,te-in);};
'\\end{inparaenum}' => { printf("%s:%zd:%zd\n", "\\end{inparaenum}",ts-in,te-in);};
'\\end{instit}' => { printf("%s:%zd:%zd\n", "\\end{instit}",ts-in,te-in);};
'\\end{i}' => { printf("%s:%zd:%zd\n", "\\end{i}",ts-in,te-in);};
'\\end{isabelle}' => { printf("%s:%zd:%zd\n", "\\end{isabelle}",ts-in,te-in);};
'\\end{itemize}' => { printf("%s:%zd:%zd\n", "\\end{itemize}",ts-in,te-in);};
'\\end{iteMize}' => { printf("%s:%zd:%zd\n", "\\end{iteMize}",ts-in,te-in);};
'\\end{Itemize}' => { printf("%s:%zd:%zd\n", "\\end{Itemize}",ts-in,te-in);};
'\\end{itemiz}' => { printf("%s:%zd:%zd\n", "\\end{itemiz}",ts-in,te-in);};
'\\end{itemlist}' => { printf("%s:%zd:%zd\n", "\\end{itemlist}",ts-in,te-in);};
'\\end{iteml}' => { printf("%s:%zd:%zd\n", "\\end{iteml}",ts-in,te-in);};
'\\end{it}' => { printf("%s:%zd:%zd\n", "\\end{it}",ts-in,te-in);};
'\\end{itshape}' => { printf("%s:%zd:%zd\n", "\\end{itshape}",ts-in,te-in);};
'\\end{key}' => { printf("%s:%zd:%zd\n", "\\end{key}",ts-in,te-in);};
'\\end{keys}' => { printf("%s:%zd:%zd\n", "\\end{keys}",ts-in,te-in);};
'\\end{keyword}' => { printf("%s:%zd:%zd\n", "\\end{keyword}",ts-in,te-in);};
'\\end{keywords}' => { printf("%s:%zd:%zd\n", "\\end{keywords}",ts-in,te-in);};
'\\end{labeling}' => { printf("%s:%zd:%zd\n", "\\end{labeling}",ts-in,te-in);};
'\\end{landscape}' => { printf("%s:%zd:%zd\n", "\\end{landscape}",ts-in,te-in);};
'\\end{lapdf}' => { printf("%s:%zd:%zd\n", "\\end{lapdf}",ts-in,te-in);};
'\\end{large}' => { printf("%s:%zd:%zd\n", "\\end{large}",ts-in,te-in);};
'\\end{Large}' => { printf("%s:%zd:%zd\n", "\\end{Large}",ts-in,te-in);};
'\\end{LARGE}' => { printf("%s:%zd:%zd\n", "\\end{LARGE}",ts-in,te-in);};
'\\end{latexonly}' => { printf("%s:%zd:%zd\n", "\\end{latexonly}",ts-in,te-in);};
'\\end{ldispl}' => { printf("%s:%zd:%zd\n", "\\end{ldispl}",ts-in,te-in);};
'\\end{lema}' => { printf("%s:%zd:%zd\n", "\\end{lema}",ts-in,te-in);};
'\\end{lemma}' => { printf("%s:%zd:%zd\n", "\\end{lemma}",ts-in,te-in);};
'\\end{Lemma}' => { printf("%s:%zd:%zd\n", "\\end{Lemma}",ts-in,te-in);};
'\\end{lemme}' => { printf("%s:%zd:%zd\n", "\\end{lemme}",ts-in,te-in);};
'\\end{lemm}' => { printf("%s:%zd:%zd\n", "\\end{lemm}",ts-in,te-in);};
'\\end{lem}' => { printf("%s:%zd:%zd\n", "\\end{lem}",ts-in,te-in);};
'\\end{Lem}' => { printf("%s:%zd:%zd\n", "\\end{Lem}",ts-in,te-in);};
'\\end{Le}' => { printf("%s:%zd:%zd\n", "\\end{Le}",ts-in,te-in);};
'\\end{letter}' => { printf("%s:%zd:%zd\n", "\\end{letter}",ts-in,te-in);};
'\\end{linenomath}' => { printf("%s:%zd:%zd\n", "\\end{linenomath}",ts-in,te-in);};
'\\end{linenumbers}' => { printf("%s:%zd:%zd\n", "\\end{linenumbers}",ts-in,te-in);};
'\\end{listingcodefile}' => { printf("%s:%zd:%zd\n", "\\end{listingcodefile}",ts-in,te-in);};
'\\end{listing}' => { printf("%s:%zd:%zd\n", "\\end{listing}",ts-in,te-in);};
'\\end{list}' => { printf("%s:%zd:%zd\n", "\\end{list}",ts-in,te-in);};
'\\end{lmm}' => { printf("%s:%zd:%zd\n", "\\end{lmm}",ts-in,te-in);};
'\\end{lm}' => { printf("%s:%zd:%zd\n", "\\end{lm}",ts-in,te-in);};
'\\end{longlist}' => { printf("%s:%zd:%zd\n", "\\end{longlist}",ts-in,te-in);};
'\\end{longtable}' => { printf("%s:%zd:%zd\n", "\\end{longtable}",ts-in,te-in);};
'\\end{lrbox}' => { printf("%s:%zd:%zd\n", "\\end{lrbox}",ts-in,te-in);};
'\\end{lstcode}' => { printf("%s:%zd:%zd\n", "\\end{lstcode}",ts-in,te-in);};
'\\end{lstlisting}' => { printf("%s:%zd:%zd\n", "\\end{lstlisting}",ts-in,te-in);};
'\\end{LTXexample}' => { printf("%s:%zd:%zd\n", "\\end{LTXexample}",ts-in,te-in);};
'\\end{lyxcode}' => { printf("%s:%zd:%zd\n", "\\end{lyxcode}",ts-in,te-in);};
'\\end{lyxgreyedout}' => { printf("%s:%zd:%zd\n", "\\end{lyxgreyedout}",ts-in,te-in);};
'\\end{macrocode}' => { printf("%s:%zd:%zd\n", "\\end{macrocode}",ts-in,te-in);};
'\\end{macro}' => { printf("%s:%zd:%zd\n", "\\end{macro}",ts-in,te-in);};
'\\end{maintheorem}' => { printf("%s:%zd:%zd\n", "\\end{maintheorem}",ts-in,te-in);};
'\\end{ma}' => { printf("%s:%zd:%zd\n", "\\end{ma}",ts-in,te-in);};
'\\end{marginfigure}' => { printf("%s:%zd:%zd\n", "\\end{marginfigure}",ts-in,te-in);};
'\\end{mathcal}' => { printf("%s:%zd:%zd\n", "\\end{mathcal}",ts-in,te-in);};
'\\end{mathletters}' => { printf("%s:%zd:%zd\n", "\\end{mathletters}",ts-in,te-in);};
'\\end{mathpar}' => { printf("%s:%zd:%zd\n", "\\end{mathpar}",ts-in,te-in);};
'\\end{math}' => { printf("%s:%zd:%zd\n", "\\end{math}",ts-in,te-in);};
'\\end{mat}' => { printf("%s:%zd:%zd\n", "\\end{mat}",ts-in,te-in);};
'\\end{matrix}' => { printf("%s:%zd:%zd\n", "\\end{matrix}",ts-in,te-in);};
'\\end{mcline}' => { printf("%s:%zd:%zd\n", "\\end{mcline}",ts-in,te-in);};
'\\end{mdframed}' => { printf("%s:%zd:%zd\n", "\\end{mdframed}",ts-in,te-in);};
'\\end{mdline}' => { printf("%s:%zd:%zd\n", "\\end{mdline}",ts-in,te-in);};
'\\end{minipage}' => { printf("%s:%zd:%zd\n", "\\end{minipage}",ts-in,te-in);};
'\\end{minted}' => { printf("%s:%zd:%zd\n", "\\end{minted}",ts-in,te-in);};
'\\end{mizar}' => { printf("%s:%zd:%zd\n", "\\end{mizar}",ts-in,te-in);};
'\\end{mmraw}' => { printf("%s:%zd:%zd\n", "\\end{mmraw}",ts-in,te-in);};
'\\end{multicols}' => { printf("%s:%zd:%zd\n", "\\end{multicols}",ts-in,te-in);};
'\\end{multi}' => { printf("%s:%zd:%zd\n", "\\end{multi}",ts-in,te-in);};
'\\end{multlined}' => { printf("%s:%zd:%zd\n", "\\end{multlined}",ts-in,te-in);};
'\\end{multline}' => { printf("%s:%zd:%zd\n", "\\end{multline}",ts-in,te-in);};
'\\end{myact}' => { printf("%s:%zd:%zd\n", "\\end{myact}",ts-in,te-in);};
'\\end{mybilan}' => { printf("%s:%zd:%zd\n", "\\end{mybilan}",ts-in,te-in);};
'\\end{mydef}' => { printf("%s:%zd:%zd\n", "\\end{mydef}",ts-in,te-in);};
'\\end{myenumerate}' => { printf("%s:%zd:%zd\n", "\\end{myenumerate}",ts-in,te-in);};
'\\end{myeqnarray}' => { printf("%s:%zd:%zd\n", "\\end{myeqnarray}",ts-in,te-in);};
'\\end{myequation}' => { printf("%s:%zd:%zd\n", "\\end{myequation}",ts-in,te-in);};
'\\end{myexos}' => { printf("%s:%zd:%zd\n", "\\end{myexos}",ts-in,te-in);};
'\\end{myimage}' => { printf("%s:%zd:%zd\n", "\\end{myimage}",ts-in,te-in);};
'\\end{mylemma}' => { printf("%s:%zd:%zd\n", "\\end{mylemma}",ts-in,te-in);};
'\\end{myproof}' => { printf("%s:%zd:%zd\n", "\\end{myproof}",ts-in,te-in);};
'\\end{myprop}' => { printf("%s:%zd:%zd\n", "\\end{myprop}",ts-in,te-in);};
'\\end{mytheorem}' => { printf("%s:%zd:%zd\n", "\\end{mytheorem}",ts-in,te-in);};
'\\end{Myverb}' => { printf("%s:%zd:%zd\n", "\\end{Myverb}",ts-in,te-in);};
'\\end{Name}' => { printf("%s:%zd:%zd\n", "\\end{Name}",ts-in,te-in);};
'\\end{narrow}' => { printf("%s:%zd:%zd\n", "\\end{narrow}",ts-in,te-in);};
'\\end{nd}' => { printf("%s:%zd:%zd\n", "\\end{nd}",ts-in,te-in);};
'\\end{NewMacroBox}' => { printf("%s:%zd:%zd\n", "\\end{NewMacroBox}",ts-in,te-in);};
'\\end{nlem}' => { printf("%s:%zd:%zd\n", "\\end{nlem}",ts-in,te-in);};
'\\end{normalsize}' => { printf("%s:%zd:%zd\n", "\\end{normalsize}",ts-in,te-in);};
'\\end{nota}' => { printf("%s:%zd:%zd\n", "\\end{nota}",ts-in,te-in);};
'\\end{notation}' => { printf("%s:%zd:%zd\n", "\\end{notation}",ts-in,te-in);};
'\\end{note}' => { printf("%s:%zd:%zd\n", "\\end{note}",ts-in,te-in);};
'\\end{Note}' => { printf("%s:%zd:%zd\n", "\\end{Note}",ts-in,te-in);};
'\\end{numcases}' => { printf("%s:%zd:%zd\n", "\\end{numcases}",ts-in,te-in);};
'\\end{NumericDataPlot}' => { printf("%s:%zd:%zd\n", "\\end{NumericDataPlot}",ts-in,te-in);};
'\\end{observation}' => { printf("%s:%zd:%zd\n", "\\end{observation}",ts-in,te-in);};
'\\end{obs}' => { printf("%s:%zd:%zd\n", "\\end{obs}",ts-in,te-in);};
'\\end{ocamlindent}' => { printf("%s:%zd:%zd\n", "\\end{ocamlindent}",ts-in,te-in);};
'\\end{ocamltabular}' => { printf("%s:%zd:%zd\n", "\\end{ocamltabular}",ts-in,te-in);};
'\\end{opening}' => { printf("%s:%zd:%zd\n", "\\end{opening}",ts-in,te-in);};
'\\end{option}' => { printf("%s:%zd:%zd\n", "\\end{option}",ts-in,te-in);};
'\\end{optiontableAuto}' => { printf("%s:%zd:%zd\n", "\\end{optiontableAuto}",ts-in,te-in);};
'\\end{otherlanguage}' => { printf("%s:%zd:%zd\n", "\\end{otherlanguage}",ts-in,te-in);};
'\\end{outline}' => { printf("%s:%zd:%zd\n", "\\end{outline}",ts-in,te-in);};
'\\end{overpic}' => { printf("%s:%zd:%zd\n", "\\end{overpic}",ts-in,te-in);};
'\\end{packed_enum}' => { printf("%s:%zd:%zd\n", "\\end{packed_enum}",ts-in,te-in);};
'\\end{packed_itemize}' => { printf("%s:%zd:%zd\n", "\\end{packed_itemize}",ts-in,te-in);};
'\\end{participant}' => { printf("%s:%zd:%zd\n", "\\end{participant}",ts-in,te-in);};
'\\end{parts}' => { printf("%s:%zd:%zd\n", "\\end{parts}",ts-in,te-in);};
'\\end{pf}' => { printf("%s:%zd:%zd\n", "\\end{pf}",ts-in,te-in);};
'\\end{pgfmagnify}' => { printf("%s:%zd:%zd\n", "\\end{pgfmagnify}",ts-in,te-in);};
'\\end{pgfmanualentry}' => { printf("%s:%zd:%zd\n", "\\end{pgfmanualentry}",ts-in,te-in);};
'\\end{pgfonlayer}' => { printf("%s:%zd:%zd\n", "\\end{pgfonlayer}",ts-in,te-in);};
'\\end{pgfpicture}' => { printf("%s:%zd:%zd\n", "\\end{pgfpicture}",ts-in,te-in);};
'\\end{pgfscope}' => { printf("%s:%zd:%zd\n", "\\end{pgfscope}",ts-in,te-in);};
'\\end{pgftranslate}' => { printf("%s:%zd:%zd\n", "\\end{pgftranslate}",ts-in,te-in);};
'\\end{picture}' => { printf("%s:%zd:%zd\n", "\\end{picture}",ts-in,te-in);};
'\\end{plain}' => { printf("%s:%zd:%zd\n", "\\end{plain}",ts-in,te-in);};
'\\end{pmatrix}' => { printf("%s:%zd:%zd\n", "\\end{pmatrix}",ts-in,te-in);};
'\\end{p}' => { printf("%s:%zd:%zd\n", "\\end{p}",ts-in,te-in);};
'\\end{Presented}' => { printf("%s:%zd:%zd\n", "\\end{Presented}",ts-in,te-in);};
'\\end{preuve}' => { printf("%s:%zd:%zd\n", "\\end{preuve}",ts-in,te-in);};
'\\end{prf}' => { printf("%s:%zd:%zd\n", "\\end{prf}",ts-in,te-in);};
'\\end{problem}' => { printf("%s:%zd:%zd\n", "\\end{problem}",ts-in,te-in);};
'\\end{prob}' => { printf("%s:%zd:%zd\n", "\\end{prob}",ts-in,te-in);};
'\\end{prog}' => { printf("%s:%zd:%zd\n", "\\end{prog}",ts-in,te-in);};
'\\end{programlisting}' => { printf("%s:%zd:%zd\n", "\\end{programlisting}",ts-in,te-in);};
'\\end{proofclaim}' => { printf("%s:%zd:%zd\n", "\\end{proofclaim}",ts-in,te-in);};
'\\end{proofof}' => { printf("%s:%zd:%zd\n", "\\end{proofof}",ts-in,te-in);};
'\\end{proofP}' => { printf("%s:%zd:%zd\n", "\\end{proofP}",ts-in,te-in);};
'\\end{proof}' => { printf("%s:%zd:%zd\n", "\\end{proof}",ts-in,te-in);};
'\\end{Proof}' => { printf("%s:%zd:%zd\n", "\\end{Proof}",ts-in,te-in);};
'\\end{PROOF}' => { printf("%s:%zd:%zd\n", "\\end{PROOF}",ts-in,te-in);};
'\\end{prooftree}' => { printf("%s:%zd:%zd\n", "\\end{prooftree}",ts-in,te-in);};
'\\end{property}' => { printf("%s:%zd:%zd\n", "\\end{property}",ts-in,te-in);};
'\\end{propn}' => { printf("%s:%zd:%zd\n", "\\end{propn}",ts-in,te-in);};
'\\end{propo}' => { printf("%s:%zd:%zd\n", "\\end{propo}",ts-in,te-in);};
'\\end{propose}' => { printf("%s:%zd:%zd\n", "\\end{propose}",ts-in,te-in);};
'\\end{proposition}' => { printf("%s:%zd:%zd\n", "\\end{proposition}",ts-in,te-in);};
'\\end{Proposition}' => { printf("%s:%zd:%zd\n", "\\end{Proposition}",ts-in,te-in);};
'\\end{propos}' => { printf("%s:%zd:%zd\n", "\\end{propos}",ts-in,te-in);};
'\\end{prop}' => { printf("%s:%zd:%zd\n", "\\end{prop}",ts-in,te-in);};
'\\end{Prop}' => { printf("%s:%zd:%zd\n", "\\end{Prop}",ts-in,te-in);};
'\\end{pro}' => { printf("%s:%zd:%zd\n", "\\end{pro}",ts-in,te-in);};
'\\end{Pro}' => { printf("%s:%zd:%zd\n", "\\end{Pro}",ts-in,te-in);};
'\\end{proveit}' => { printf("%s:%zd:%zd\n", "\\end{proveit}",ts-in,te-in);};
'\\end{prp}' => { printf("%s:%zd:%zd\n", "\\end{prp}",ts-in,te-in);};
'\\end{pr}' => { printf("%s:%zd:%zd\n", "\\end{pr}",ts-in,te-in);};
'\\end{psfrags}' => { printf("%s:%zd:%zd\n", "\\end{psfrags}",ts-in,te-in);};
'\\end{psmatrix}' => { printf("%s:%zd:%zd\n", "\\end{psmatrix}",ts-in,te-in);};
'\\end{pspicture}' => { printf("%s:%zd:%zd\n", "\\end{pspicture}",ts-in,te-in);};
'\\end{publist}' => { printf("%s:%zd:%zd\n", "\\end{publist}",ts-in,te-in);};
'\\end{qstest}' => { printf("%s:%zd:%zd\n", "\\end{qstest}",ts-in,te-in);};
'\\end{ques}' => { printf("%s:%zd:%zd\n", "\\end{ques}",ts-in,te-in);};
'\\end{question}' => { printf("%s:%zd:%zd\n", "\\end{question}",ts-in,te-in);};
'\\end{questions}' => { printf("%s:%zd:%zd\n", "\\end{questions}",ts-in,te-in);};
'\\end{quest}' => { printf("%s:%zd:%zd\n", "\\end{quest}",ts-in,te-in);};
'\\end{quiz}' => { printf("%s:%zd:%zd\n", "\\end{quiz}",ts-in,te-in);};
'\\end{quotation}' => { printf("%s:%zd:%zd\n", "\\end{quotation}",ts-in,te-in);};
'\\end{quote}' => { printf("%s:%zd:%zd\n", "\\end{quote}",ts-in,te-in);};
'\\end{quoting}' => { printf("%s:%zd:%zd\n", "\\end{quoting}",ts-in,te-in);};
'\\end{raggedleft}' => { printf("%s:%zd:%zd\n", "\\end{raggedleft}",ts-in,te-in);};
'\\end{raggedright}' => { printf("%s:%zd:%zd\n", "\\end{raggedright}",ts-in,te-in);};
'\\end{rawhtml}' => { printf("%s:%zd:%zd\n", "\\end{rawhtml}",ts-in,te-in);};
'\\end{refdescription}' => { printf("%s:%zd:%zd\n", "\\end{refdescription}",ts-in,te-in);};
'\\end{references}' => { printf("%s:%zd:%zd\n", "\\end{references}",ts-in,te-in);};
'\\end{refnotes}' => { printf("%s:%zd:%zd\n", "\\end{refnotes}",ts-in,te-in);};
'\\end{refparameters}' => { printf("%s:%zd:%zd\n", "\\end{refparameters}",ts-in,te-in);};
'\\end{refreturn}' => { printf("%s:%zd:%zd\n", "\\end{refreturn}",ts-in,te-in);};
'\\end{rema}' => { printf("%s:%zd:%zd\n", "\\end{rema}",ts-in,te-in);};
'\\end{remarkk}' => { printf("%s:%zd:%zd\n", "\\end{remarkk}",ts-in,te-in);};
'\\end{remark}' => { printf("%s:%zd:%zd\n", "\\end{remark}",ts-in,te-in);};
'\\end{Remark}' => { printf("%s:%zd:%zd\n", "\\end{Remark}",ts-in,te-in);};
'\\end{remarks}' => { printf("%s:%zd:%zd\n", "\\end{remarks}",ts-in,te-in);};
'\\end{remarque}' => { printf("%s:%zd:%zd\n", "\\end{remarque}",ts-in,te-in);};
'\\end{remk}' => { printf("%s:%zd:%zd\n", "\\end{remk}",ts-in,te-in);};
'\\end{rem}' => { printf("%s:%zd:%zd\n", "\\end{rem}",ts-in,te-in);};
'\\end{Rem}' => { printf("%s:%zd:%zd\n", "\\end{Rem}",ts-in,te-in);};
'\\end{rems}' => { printf("%s:%zd:%zd\n", "\\end{rems}",ts-in,te-in);};
'\\end{reponses}' => { printf("%s:%zd:%zd\n", "\\end{reponses}",ts-in,te-in);};
'\\end{reptheorem}' => { printf("%s:%zd:%zd\n", "\\end{reptheorem}",ts-in,te-in);};
'\\end{requirement}' => { printf("%s:%zd:%zd\n", "\\end{requirement}",ts-in,te-in);};
'\\end{restatable}' => { printf("%s:%zd:%zd\n", "\\end{restatable}",ts-in,te-in);};
'\\end{result}' => { printf("%s:%zd:%zd\n", "\\end{result}",ts-in,te-in);};
'\\end{rk}' => { printf("%s:%zd:%zd\n", "\\end{rk}",ts-in,te-in);};
'\\end{rmk}' => { printf("%s:%zd:%zd\n", "\\end{rmk}",ts-in,te-in);};
'\\end{Rmk}' => { printf("%s:%zd:%zd\n", "\\end{Rmk}",ts-in,te-in);};
'\\end{rmq}' => { printf("%s:%zd:%zd\n", "\\end{rmq}",ts-in,te-in);};
'\\end{rmr}' => { printf("%s:%zd:%zd\n", "\\end{rmr}",ts-in,te-in);};
'\\end{romanlist}' => { printf("%s:%zd:%zd\n", "\\end{romanlist}",ts-in,te-in);};
'\\end{rotate}' => { printf("%s:%zd:%zd\n", "\\end{rotate}",ts-in,te-in);};
'\\end{ruledtabular}' => { printf("%s:%zd:%zd\n", "\\end{ruledtabular}",ts-in,te-in);};
'\\end{Russian}' => { printf("%s:%zd:%zd\n", "\\end{Russian}",ts-in,te-in);};
'\\end{sagecommandline}' => { printf("%s:%zd:%zd\n", "\\end{sagecommandline}",ts-in,te-in);};
'\\end{samepage}' => { printf("%s:%zd:%zd\n", "\\end{samepage}",ts-in,te-in);};
'\\end{satz}' => { printf("%s:%zd:%zd\n", "\\end{satz}",ts-in,te-in);};
'\\end{Satz}' => { printf("%s:%zd:%zd\n", "\\end{Satz}",ts-in,te-in);};
'\\end{savenotes}' => { printf("%s:%zd:%zd\n", "\\end{savenotes}",ts-in,te-in);};
'\\end{Sb}' => { printf("%s:%zd:%zd\n", "\\end{Sb}",ts-in,te-in);};
'\\end{SCfigure}' => { printf("%s:%zd:%zd\n", "\\end{SCfigure}",ts-in,te-in);};
'\\end{Schunk}' => { printf("%s:%zd:%zd\n", "\\end{Schunk}",ts-in,te-in);};
'\\end{scope}' => { printf("%s:%zd:%zd\n", "\\end{scope}",ts-in,te-in);};
'\\end{scriptsize}' => { printf("%s:%zd:%zd\n", "\\end{scriptsize}",ts-in,te-in);};
'\\end{section}' => { printf("%s:%zd:%zd\n", "\\end{section}",ts-in,te-in);};
'\\end{sectionunit}' => { printf("%s:%zd:%zd\n", "\\end{sectionunit}",ts-in,te-in);};
'\\end{sequencediagram}' => { printf("%s:%zd:%zd\n", "\\end{sequencediagram}",ts-in,te-in);};
'\\end{ShowOutput}' => { printf("%s:%zd:%zd\n", "\\end{ShowOutput}",ts-in,te-in);};
'\\end{sidewaysfigure}' => { printf("%s:%zd:%zd\n", "\\end{sidewaysfigure}",ts-in,te-in);};
'\\end{sideways}' => { printf("%s:%zd:%zd\n", "\\end{sideways}",ts-in,te-in);};
'\\end{sidewaystable}' => { printf("%s:%zd:%zd\n", "\\end{sidewaystable}",ts-in,te-in);};
'\\end{singlespace}' => { printf("%s:%zd:%zd\n", "\\end{singlespace}",ts-in,te-in);};
'\\end{Sinput}' => { printf("%s:%zd:%zd\n", "\\end{Sinput}",ts-in,te-in);};
'\\end{slide}' => { printf("%s:%zd:%zd\n", "\\end{slide}",ts-in,te-in);};
'\\end{sli}' => { printf("%s:%zd:%zd\n", "\\end{sli}",ts-in,te-in);};
'\\end{sloppypar}' => { printf("%s:%zd:%zd\n", "\\end{sloppypar}",ts-in,te-in);};
'\\end{smallmatrix}' => { printf("%s:%zd:%zd\n", "\\end{smallmatrix}",ts-in,te-in);};
'\\end{small}' => { printf("%s:%zd:%zd\n", "\\end{small}",ts-in,te-in);};
'\\end{solution}' => { printf("%s:%zd:%zd\n", "\\end{solution}",ts-in,te-in);};
'\\end{spacing}' => { printf("%s:%zd:%zd\n", "\\end{spacing}",ts-in,te-in);};
'\\end{spec}' => { printf("%s:%zd:%zd\n", "\\end{spec}",ts-in,te-in);};
'\\end{split}' => { printf("%s:%zd:%zd\n", "\\end{split}",ts-in,te-in);};
'\\end{statement}' => { printf("%s:%zd:%zd\n", "\\end{statement}",ts-in,te-in);};
'\\end{step}' => { printf("%s:%zd:%zd\n", "\\end{step}",ts-in,te-in);};
'\\end{subarray}' => { printf("%s:%zd:%zd\n", "\\end{subarray}",ts-in,te-in);};
'\\end{subbibitems}' => { printf("%s:%zd:%zd\n", "\\end{subbibitems}",ts-in,te-in);};
'\\end{subentry}' => { printf("%s:%zd:%zd\n", "\\end{subentry}",ts-in,te-in);};
'\\end{subeqnarray}' => { printf("%s:%zd:%zd\n", "\\end{subeqnarray}",ts-in,te-in);};
'\\end{subeqn}' => { printf("%s:%zd:%zd\n", "\\end{subeqn}",ts-in,te-in);};
'\\end{subequation}' => { printf("%s:%zd:%zd\n", "\\end{subequation}",ts-in,te-in);};
'\\end{subequations}' => { printf("%s:%zd:%zd\n", "\\end{subequations}",ts-in,te-in);};
'\\end{subfigure}' => { printf("%s:%zd:%zd\n", "\\end{subfigure}",ts-in,te-in);};
'\\end{sublemma}' => { printf("%s:%zd:%zd\n", "\\end{sublemma}",ts-in,te-in);};
'\\end{subparts}' => { printf("%s:%zd:%zd\n", "\\end{subparts}",ts-in,te-in);};
'\\end{sub}' => { printf("%s:%zd:%zd\n", "\\end{sub}",ts-in,te-in);};
'\\end{subproof}' => { printf("%s:%zd:%zd\n", "\\end{subproof}",ts-in,te-in);};
'\\end{subsection}' => { printf("%s:%zd:%zd\n", "\\end{subsection}",ts-in,te-in);};
'\\end{subsub}' => { printf("%s:%zd:%zd\n", "\\end{subsub}",ts-in,te-in);};
'\\end{subsubsection}' => { printf("%s:%zd:%zd\n", "\\end{subsubsection}",ts-in,te-in);};
'\\end{subtable}' => { printf("%s:%zd:%zd\n", "\\end{subtable}",ts-in,te-in);};
'\\end{supertabular}' => { printf("%s:%zd:%zd\n", "\\end{supertabular}",ts-in,te-in);};
'\\end{supplement}' => { printf("%s:%zd:%zd\n", "\\end{supplement}",ts-in,te-in);};
'\\end{tabbing}' => { printf("%s:%zd:%zd\n", "\\end{tabbing}",ts-in,te-in);};
'\\end{tablenotes}' => { printf("%s:%zd:%zd\n", "\\end{tablenotes}",ts-in,te-in);};
'\\end{table}' => { printf("%s:%zd:%zd\n", "\\end{table}",ts-in,te-in);};
'\\end{tabular}' => { printf("%s:%zd:%zd\n", "\\end{tabular}",ts-in,te-in);};
'\\end{tabularx}' => { printf("%s:%zd:%zd\n", "\\end{tabularx}",ts-in,te-in);};
'\\end{tabulary}' => { printf("%s:%zd:%zd\n", "\\end{tabulary}",ts-in,te-in);};
'\\end{tcolorbox}' => { printf("%s:%zd:%zd\n", "\\end{tcolorbox}",ts-in,te-in);};
'\\end{teo}' => { printf("%s:%zd:%zd\n", "\\end{teo}",ts-in,te-in);};
'\\end{teorema}' => { printf("%s:%zd:%zd\n", "\\end{teorema}",ts-in,te-in);};
'\\end{term}' => { printf("%s:%zd:%zd\n", "\\end{term}",ts-in,te-in);};
'\\end{texdraw}' => { printf("%s:%zd:%zd\n", "\\end{texdraw}",ts-in,te-in);};
'\\end{textblock}' => { printf("%s:%zd:%zd\n", "\\end{textblock}",ts-in,te-in);};
'\\end{theacknowledgments}' => { printf("%s:%zd:%zd\n", "\\end{theacknowledgments}",ts-in,te-in);};
'\\end{thebibliography}' => { printf("%s:%zd:%zd\n", "\\end{thebibliography}",ts-in,te-in);};
'\\end{theo}' => { printf("%s:%zd:%zd\n", "\\end{theo}",ts-in,te-in);};
'\\end{theoreme}' => { printf("%s:%zd:%zd\n", "\\end{theoreme}",ts-in,te-in);};
'\\end{theorem}' => { printf("%s:%zd:%zd\n", "\\end{theorem}",ts-in,te-in);};
'\\end{Theorem}' => { printf("%s:%zd:%zd\n", "\\end{Theorem}",ts-in,te-in);};
'\\end{theor}' => { printf("%s:%zd:%zd\n", "\\end{theor}",ts-in,te-in);};
'\\end{The}' => { printf("%s:%zd:%zd\n", "\\end{The}",ts-in,te-in);};
'\\end{thmm}' => { printf("%s:%zd:%zd\n", "\\end{thmm}",ts-in,te-in);};
'\\end{thm}' => { printf("%s:%zd:%zd\n", "\\end{thm}",ts-in,te-in);};
'\\end{Thm}' => { printf("%s:%zd:%zd\n", "\\end{Thm}",ts-in,te-in);};
'\\end{th}' => { printf("%s:%zd:%zd\n", "\\end{th}",ts-in,te-in);};
'\\end{Th}' => { printf("%s:%zd:%zd\n", "\\end{Th}",ts-in,te-in);};
'\\end{threeparttable}' => { printf("%s:%zd:%zd\n", "\\end{threeparttable}",ts-in,te-in);};
'\\end{thrm}' => { printf("%s:%zd:%zd\n", "\\end{thrm}",ts-in,te-in);};
'\\end{tight_itemize}' => { printf("%s:%zd:%zd\n", "\\end{tight_itemize}",ts-in,te-in);};
'\\end{tikzcd}' => { printf("%s:%zd:%zd\n", "\\end{tikzcd}",ts-in,te-in);};
'\\end{tikzpicture}' => { printf("%s:%zd:%zd\n", "\\end{tikzpicture}",ts-in,te-in);};
'\\end{tiny}' => { printf("%s:%zd:%zd\n", "\\end{tiny}",ts-in,te-in);};
'\\end{titlepage}' => { printf("%s:%zd:%zd\n", "\\end{titlepage}",ts-in,te-in);};
'\\end{title}' => { printf("%s:%zd:%zd\n", "\\end{title}",ts-in,te-in);};
'\\end{tkzexample}' => { printf("%s:%zd:%zd\n", "\\end{tkzexample}",ts-in,te-in);};
'\\end{tmvacode}' => { printf("%s:%zd:%zd\n", "\\end{tmvacode}",ts-in,te-in);};
'\\end{todolist}' => { printf("%s:%zd:%zd\n", "\\end{todolist}",ts-in,te-in);};
'\\end{T}' => { printf("%s:%zd:%zd\n", "\\end{T}",ts-in,te-in);};
'\\end{trivlist}' => { printf("%s:%zd:%zd\n", "\\end{trivlist}",ts-in,te-in);};
'\\end{ttbox}' => { printf("%s:%zd:%zd\n", "\\end{ttbox}",ts-in,te-in);};
'\\end{turnpage}' => { printf("%s:%zd:%zd\n", "\\end{turnpage}",ts-in,te-in);};
'\\end{turn}' => { printf("%s:%zd:%zd\n", "\\end{turn}",ts-in,te-in);};
'\\end{twomatrix}' => { printf("%s:%zd:%zd\n", "\\end{twomatrix}",ts-in,te-in);};
'\\end{txteq}' => { printf("%s:%zd:%zd\n", "\\end{txteq}",ts-in,te-in);};
'\\end{Ventry}' => { printf("%s:%zd:%zd\n", "\\end{Ventry}",ts-in,te-in);};
'\\end{verbatim}' => { printf("%s:%zd:%zd\n", "\\end{verbatim}",ts-in,te-in);};
'\\end{Verbatim}' => { printf("%s:%zd:%zd\n", "\\end{Verbatim}",ts-in,te-in);};
'\\end{verbatimtab}' => { printf("%s:%zd:%zd\n", "\\end{verbatimtab}",ts-in,te-in);};
'\\end{verse}' => { printf("%s:%zd:%zd\n", "\\end{verse}",ts-in,te-in);};
'\\end{vimcmdform}' => { printf("%s:%zd:%zd\n", "\\end{vimcmdform}",ts-in,te-in);};
'\\end{vimcode}' => { printf("%s:%zd:%zd\n", "\\end{vimcode}",ts-in,te-in);};
'\\end{vmatrix}' => { printf("%s:%zd:%zd\n", "\\end{vmatrix}",ts-in,te-in);};
'\\end{Vmatrix}' => { printf("%s:%zd:%zd\n", "\\end{Vmatrix}",ts-in,te-in);};
'\\end{warning}' => { printf("%s:%zd:%zd\n", "\\end{warning}",ts-in,te-in);};
'\\end{whycode}' => { printf("%s:%zd:%zd\n", "\\end{whycode}",ts-in,te-in);};
'\\end{widetext}' => { printf("%s:%zd:%zd\n", "\\end{widetext}",ts-in,te-in);};
'\\end{wpdeliv}' => { printf("%s:%zd:%zd\n", "\\end{wpdeliv}",ts-in,te-in);};
'\\end{wrapfigure}' => { printf("%s:%zd:%zd\n", "\\end{wrapfigure}",ts-in,te-in);};
'\\end{wraptable}' => { printf("%s:%zd:%zd\n", "\\end{wraptable}",ts-in,te-in);};
'\\end{xalignat}' => { printf("%s:%zd:%zd\n", "\\end{xalignat}",ts-in,te-in);};
'\\end{xy}' => { printf("%s:%zd:%zd\n", "\\end{xy}",ts-in,te-in);};
'\\end{young}' => { printf("%s:%zd:%zd\n", "\\end{young}",ts-in,te-in);};
'\\affiliation{' (any-'}')+ '}' => { printf("%s:%zd:%zd\n", "\\affiliation{",ts-in,te-in);};
'\\author{' (any-'}')+ '}' => { printf("%s:%zd:%zd\n", "\\author{",ts-in,te-in);};
'\\bibitem{' (any-'}')+ '}' => { printf("%s:%zd:%zd\n", "\\bibitem{",ts-in,te-in);};
'\\caption{' (any-'}')+ '}' => { printf("%s:%zd:%zd\n", "\\caption{",ts-in,te-in);};
'\\cite{'(any-'}')+ '}' (any-'}')+ '}' => { printf("%s:%zd:%zd\n", "\\cite{",ts-in,te-in);};
'\\end{' (any-'}')+ '}' => { printf("%s:%zd:%zd\n", "\\end{",ts-in,te-in);};
'\\frac{' (any-'}')+ '}' => { printf("%s:%zd:%zd\n", "\\frac{",ts-in,te-in);};
'\\includegraphics{' (any-'}')+ '}' => { printf("%s:%zd:%zd\n", "\\includegraphics{",ts-in,te-in);};
'\\label{' (any-'}')+ '}' => { printf("%s:%zd:%zd\n", "\\label{",ts-in,te-in);};
'\\mathbf{' (any-'}')+ '}' => { printf("%s:%zd:%zd\n", "\\mathbf{",ts-in,te-in);};
'\\omicron{' (any-'}')+ '}' => { printf("%s:%zd:%zd\n", "\\omicron{",ts-in,te-in);};
'\\ref{' (any-'}')+ '}' => { printf("%s:%zd:%zd\n", "\\ref{",ts-in,te-in);};
'\\scalebox{' (any-'}')+ '}' => { printf("%s:%zd:%zd\n", "\\scalebox{",ts-in,te-in);};
'\\section{' (any-'}')+ '}' => { printf("%s:%zd:%zd\n", "\\section{",ts-in,te-in);};
'\\sqrt{' (any-'}')+ '}' => { printf("%s:%zd:%zd\n", "\\sqrt{",ts-in,te-in);};
'\\title{' (any-'}')+ '}' => { printf("%s:%zd:%zd\n", "\\title{",ts-in,te-in);};
'\\usepackage{' (any-'}')+ '}' => { printf("%s:%zd:%zd\n", "\\usepackage{",ts-in,te-in);};

any => {};

	*|;
}%%

%% write data;

int scan(const char *in)
{
	int cs = 0, act = 0;
	const char *p = in;
	const char *pe = in + strlen(in);
	const char *ts = NULL, *te = NULL;
	const char *eof = pe;

	%% write init;
	%% write exec;


	if (cs == part_token_error)
		printf("Error near %zd\n", p-in);
	else if(ts)
		printf("offsets: ts %zd te: %zd pe: %zd\n", ts-in, te-in, pe-in);

	return EXIT_SUCCESS;
}


int main(int argc, char **argv) {
  int cs, res = 0;
  struct stat s;
  void *buff;
  int fd;
  fd = open(argv[1], O_RDONLY);
  if (fd < 0)
    return EXIT_FAILURE;
  fstat(fd, &s);
  /* PROT_READ disallows writing to buff: will segv */
  buff = mmap(NULL, s.st_size, PROT_READ, MAP_PRIVATE, fd, 0);
  if (buff != (void *)-1) {
    	scan((char*)buff);
	munmap(buff, s.st_size);
  }
  close(fd);
  return 0;
}
